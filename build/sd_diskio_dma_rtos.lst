ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"sd_diskio_dma_rtos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SD_CheckStatus,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	SD_CheckStatus:
  25              	.LFB141:
  26              		.file 1 "Src/sd_diskio_dma_rtos.c"
   1:Src/sd_diskio_dma_rtos.c **** /**
   2:Src/sd_diskio_dma_rtos.c ****   ******************************************************************************
   3:Src/sd_diskio_dma_rtos.c ****   * @file    sd_diskio_dma_rtos.c
   4:Src/sd_diskio_dma_rtos.c ****   * @author  MCD Application Team
   5:Src/sd_diskio_dma_rtos.c ****   * @brief   SD Disk I/O DMA with RTOS driver.
   6:Src/sd_diskio_dma_rtos.c ****   ******************************************************************************
   7:Src/sd_diskio_dma_rtos.c ****   * @attention
   8:Src/sd_diskio_dma_rtos.c ****   *
   9:Src/sd_diskio_dma_rtos.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics International N.V.
  10:Src/sd_diskio_dma_rtos.c ****   * All rights reserved.</center></h2>
  11:Src/sd_diskio_dma_rtos.c ****   *
  12:Src/sd_diskio_dma_rtos.c ****   * Redistribution and use in source and binary forms, with or without
  13:Src/sd_diskio_dma_rtos.c ****   * modification, are permitted, provided that the following conditions are met:
  14:Src/sd_diskio_dma_rtos.c ****   *
  15:Src/sd_diskio_dma_rtos.c ****   * 1. Redistribution of source code must retain the above copyright notice,
  16:Src/sd_diskio_dma_rtos.c ****   *    this list of conditions and the following disclaimer.
  17:Src/sd_diskio_dma_rtos.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  18:Src/sd_diskio_dma_rtos.c ****   *    this list of conditions and the following disclaimer in the documentation
  19:Src/sd_diskio_dma_rtos.c ****   *    and/or other materials provided with the distribution.
  20:Src/sd_diskio_dma_rtos.c ****   * 3. Neither the name of STMicroelectronics nor the names of other
  21:Src/sd_diskio_dma_rtos.c ****   *    contributors to this software may be used to endorse or promote products
  22:Src/sd_diskio_dma_rtos.c ****   *    derived from this software without specific written permission.
  23:Src/sd_diskio_dma_rtos.c ****   * 4. This software, including modifications and/or derivative works of this
  24:Src/sd_diskio_dma_rtos.c ****   *    software, must execute solely and exclusively on microcontroller or
  25:Src/sd_diskio_dma_rtos.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  26:Src/sd_diskio_dma_rtos.c ****   * 5. Redistribution and use of this software other than as permitted under
  27:Src/sd_diskio_dma_rtos.c ****   *    this license is void and will automatically terminate your rights under
  28:Src/sd_diskio_dma_rtos.c ****   *    this license.
  29:Src/sd_diskio_dma_rtos.c ****   *
  30:Src/sd_diskio_dma_rtos.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
  31:Src/sd_diskio_dma_rtos.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  32:Src/sd_diskio_dma_rtos.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 2


  33:Src/sd_diskio_dma_rtos.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  34:Src/sd_diskio_dma_rtos.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  35:Src/sd_diskio_dma_rtos.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  36:Src/sd_diskio_dma_rtos.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  37:Src/sd_diskio_dma_rtos.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  38:Src/sd_diskio_dma_rtos.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  39:Src/sd_diskio_dma_rtos.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  40:Src/sd_diskio_dma_rtos.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  41:Src/sd_diskio_dma_rtos.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  42:Src/sd_diskio_dma_rtos.c ****   *
  43:Src/sd_diskio_dma_rtos.c ****   ******************************************************************************
  44:Src/sd_diskio_dma_rtos.c ****   */
  45:Src/sd_diskio_dma_rtos.c **** 
  46:Src/sd_diskio_dma_rtos.c **** /* Includes ------------------------------------------------------------------*/
  47:Src/sd_diskio_dma_rtos.c **** #include "FreeRTOS.h"
  48:Src/sd_diskio_dma_rtos.c **** #include "task.h"
  49:Src/sd_diskio_dma_rtos.c **** #include "cmsis_os.h"
  50:Src/sd_diskio_dma_rtos.c **** #include "ff_gen_drv.h"
  51:Src/sd_diskio_dma_rtos.c **** #include "stm32f7_diskio_dma_rtos.h"
  52:Src/sd_diskio_dma_rtos.c **** 
  53:Src/sd_diskio_dma_rtos.c **** //#include "sd_diskio_dma_rtos.h"
  54:Src/sd_diskio_dma_rtos.c **** /* DMA definitions for SD DMA transfer */
  55:Src/sd_diskio_dma_rtos.c **** #define __DMAx_TxRx_CLK_ENABLE            __HAL_RCC_DMA2_CLK_ENABLE
  56:Src/sd_diskio_dma_rtos.c **** #define SD1_DMAx_Tx_CHANNEL                DMA_CHANNEL_4
  57:Src/sd_diskio_dma_rtos.c **** #define SD1_DMAx_Rx_CHANNEL                DMA_CHANNEL_4
  58:Src/sd_diskio_dma_rtos.c **** #define SD1_DMAx_Tx_STREAM                 DMA2_Stream6
  59:Src/sd_diskio_dma_rtos.c **** #define SD1_DMAx_Rx_STREAM                 DMA2_Stream3
  60:Src/sd_diskio_dma_rtos.c **** #define SD1_DMAx_Tx_IRQn                   DMA2_Stream6_IRQn
  61:Src/sd_diskio_dma_rtos.c **** #define SD1_DMAx_Rx_IRQn                   DMA2_Stream3_IRQn
  62:Src/sd_diskio_dma_rtos.c **** #define BSP_SDMMC1_DMA_Tx_IRQHandler       DMA2_Stream6_IRQHandler
  63:Src/sd_diskio_dma_rtos.c **** #define BSP_SDMMC1_DMA_Rx_IRQHandler       DMA2_Stream3_IRQHandler
  64:Src/sd_diskio_dma_rtos.c **** #define BSP_SDMMC1_IRQHandler              SDMMC1_IRQHandler
  65:Src/sd_diskio_dma_rtos.c **** 
  66:Src/sd_diskio_dma_rtos.c **** /* Private typedef -----------------------------------------------------------*/
  67:Src/sd_diskio_dma_rtos.c **** /* Private define ------------------------------------------------------------*/
  68:Src/sd_diskio_dma_rtos.c **** #define QUEUE_SIZE         (uint32_t) 10
  69:Src/sd_diskio_dma_rtos.c **** #define READ_CPLT_MSG      (uint32_t) 1
  70:Src/sd_diskio_dma_rtos.c **** #define WRITE_CPLT_MSG     (uint32_t) 2
  71:Src/sd_diskio_dma_rtos.c **** #define ABORT_MSG          (uint32_t) 3
  72:Src/sd_diskio_dma_rtos.c **** 
  73:Src/sd_diskio_dma_rtos.c **** /*
  74:Src/sd_diskio_dma_rtos.c ****  * the following Timeout is useful to give the control back to the applications
  75:Src/sd_diskio_dma_rtos.c ****  * in case of errors in either BSP_SD_ReadCpltCallback() or BSP_SD_WriteCpltCallback()
  76:Src/sd_diskio_dma_rtos.c ****  * the value by default is as defined in the BSP platform driver otherwise 30 secs
  77:Src/sd_diskio_dma_rtos.c ****  *
  78:Src/sd_diskio_dma_rtos.c ****  */
  79:Src/sd_diskio_dma_rtos.c **** 
  80:Src/sd_diskio_dma_rtos.c **** #define SD_TIMEOUT 30 * 1000
  81:Src/sd_diskio_dma_rtos.c **** 
  82:Src/sd_diskio_dma_rtos.c **** #define SD_DEFAULT_BLOCK_SIZE 512
  83:Src/sd_diskio_dma_rtos.c **** 
  84:Src/sd_diskio_dma_rtos.c **** /*
  85:Src/sd_diskio_dma_rtos.c ****  * Depending on the usecase, the SD card initialization could be done at the
  86:Src/sd_diskio_dma_rtos.c ****  * application level, if it is the case define the flag below to disable
  87:Src/sd_diskio_dma_rtos.c ****  * the BSP_SD_Init() call in the SD_Initialize().
  88:Src/sd_diskio_dma_rtos.c ****  */
  89:Src/sd_diskio_dma_rtos.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 3


  90:Src/sd_diskio_dma_rtos.c **** /* #define DISABLE_SD_INIT */
  91:Src/sd_diskio_dma_rtos.c **** 
  92:Src/sd_diskio_dma_rtos.c **** 
  93:Src/sd_diskio_dma_rtos.c **** /*
  94:Src/sd_diskio_dma_rtos.c ****  * when using cachable memory region, it may be needed to maintain the cache
  95:Src/sd_diskio_dma_rtos.c ****  * validity. Enable the define below to activate a cache maintenance at each
  96:Src/sd_diskio_dma_rtos.c ****  * read and write operation.
  97:Src/sd_diskio_dma_rtos.c ****  * Notice: This is applicable only for cortex M7 based platform.
  98:Src/sd_diskio_dma_rtos.c ****  */
  99:Src/sd_diskio_dma_rtos.c **** 
 100:Src/sd_diskio_dma_rtos.c **** /* #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 */
 101:Src/sd_diskio_dma_rtos.c **** 
 102:Src/sd_diskio_dma_rtos.c **** 
 103:Src/sd_diskio_dma_rtos.c **** /* Private variables ---------------------------------------------------------*/
 104:Src/sd_diskio_dma_rtos.c **** /* Disk status */
 105:Src/sd_diskio_dma_rtos.c **** static volatile DSTATUS Stat = STA_NOINIT;
 106:Src/sd_diskio_dma_rtos.c **** static osMessageQId SDQueueID;
 107:Src/sd_diskio_dma_rtos.c **** /* Private function prototypes -----------------------------------------------*/
 108:Src/sd_diskio_dma_rtos.c **** static DSTATUS SD_CheckStatus(BYTE lun);
 109:Src/sd_diskio_dma_rtos.c **** DSTATUS SD_initialize (BYTE);
 110:Src/sd_diskio_dma_rtos.c **** DSTATUS SD_status (BYTE);
 111:Src/sd_diskio_dma_rtos.c **** DRESULT SD_read (BYTE, BYTE*, DWORD, UINT);
 112:Src/sd_diskio_dma_rtos.c **** #if _USE_WRITE == 1
 113:Src/sd_diskio_dma_rtos.c ****   DRESULT SD_write (BYTE, const BYTE*, DWORD, UINT);
 114:Src/sd_diskio_dma_rtos.c **** #endif /* _USE_WRITE == 1 */
 115:Src/sd_diskio_dma_rtos.c **** #if _USE_IOCTL == 1
 116:Src/sd_diskio_dma_rtos.c ****   DRESULT SD_ioctl (BYTE, BYTE, void*);
 117:Src/sd_diskio_dma_rtos.c **** #endif  /* _USE_IOCTL == 1 */
 118:Src/sd_diskio_dma_rtos.c **** 
 119:Src/sd_diskio_dma_rtos.c **** const Diskio_drvTypeDef  SD_Driver =
 120:Src/sd_diskio_dma_rtos.c **** {
 121:Src/sd_diskio_dma_rtos.c ****   SD_initialize,
 122:Src/sd_diskio_dma_rtos.c ****   SD_status,
 123:Src/sd_diskio_dma_rtos.c ****   SD_read,
 124:Src/sd_diskio_dma_rtos.c **** #if  _USE_WRITE == 1
 125:Src/sd_diskio_dma_rtos.c ****   SD_write,
 126:Src/sd_diskio_dma_rtos.c **** #endif /* _USE_WRITE == 1 */
 127:Src/sd_diskio_dma_rtos.c **** 
 128:Src/sd_diskio_dma_rtos.c **** #if  _USE_IOCTL == 1
 129:Src/sd_diskio_dma_rtos.c ****   SD_ioctl,
 130:Src/sd_diskio_dma_rtos.c **** #endif /* _USE_IOCTL == 1 */
 131:Src/sd_diskio_dma_rtos.c **** };
 132:Src/sd_diskio_dma_rtos.c **** 
 133:Src/sd_diskio_dma_rtos.c **** /* Private functions ---------------------------------------------------------*/
 134:Src/sd_diskio_dma_rtos.c **** static DSTATUS SD_CheckStatus(BYTE lun)
 135:Src/sd_diskio_dma_rtos.c **** {
  27              		.loc 1 135 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 136:Src/sd_diskio_dma_rtos.c ****   Stat = STA_NOINIT;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 4


  37              		.loc 1 136 0
  38 0002 0122     		movs	r2, #1
  39 0004 064B     		ldr	r3, .L4
  40 0006 1A70     		strb	r2, [r3]
 137:Src/sd_diskio_dma_rtos.c **** 
 138:Src/sd_diskio_dma_rtos.c ****   if(BSP_SD_GetCardState() == MSD_OK)
  41              		.loc 1 138 0
  42 0008 FFF7FEFF 		bl	BSP_SD_GetCardState
  43              	.LVL1:
  44 000c 20B9     		cbnz	r0, .L2
 139:Src/sd_diskio_dma_rtos.c ****   {
 140:Src/sd_diskio_dma_rtos.c ****     Stat &= ~STA_NOINIT;
  45              		.loc 1 140 0
  46 000e 044A     		ldr	r2, .L4
  47 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  48 0012 03F0FE03 		and	r3, r3, #254
  49 0016 1370     		strb	r3, [r2]
  50              	.L2:
 141:Src/sd_diskio_dma_rtos.c ****   }
 142:Src/sd_diskio_dma_rtos.c **** 
 143:Src/sd_diskio_dma_rtos.c ****   return Stat;
  51              		.loc 1 143 0
  52 0018 014B     		ldr	r3, .L4
  53 001a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 144:Src/sd_diskio_dma_rtos.c **** }
  54              		.loc 1 144 0
  55 001c 08BD     		pop	{r3, pc}
  56              	.L5:
  57 001e 00BF     		.align	2
  58              	.L4:
  59 0020 00000000 		.word	.LANCHOR0
  60              		.cfi_endproc
  61              	.LFE141:
  63              		.section	.text.SD_initialize,"ax",%progbits
  64              		.align	1
  65              		.global	SD_initialize
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv5-sp-d16
  71              	SD_initialize:
  72              	.LFB142:
 145:Src/sd_diskio_dma_rtos.c **** 
 146:Src/sd_diskio_dma_rtos.c **** /**
 147:Src/sd_diskio_dma_rtos.c ****   * @brief  Initializes a Drive
 148:Src/sd_diskio_dma_rtos.c ****   * @param  lun : not used
 149:Src/sd_diskio_dma_rtos.c ****   * @retval DSTATUS: Operation status
 150:Src/sd_diskio_dma_rtos.c ****   */
 151:Src/sd_diskio_dma_rtos.c **** DSTATUS SD_initialize(BYTE lun)
 152:Src/sd_diskio_dma_rtos.c **** {
  73              		.loc 1 152 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 8
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              	.LVL2:
  78 0000 10B5     		push	{r4, lr}
  79              	.LCFI1:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 5


  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  83 0002 82B0     		sub	sp, sp, #8
  84              	.LCFI2:
  85              		.cfi_def_cfa_offset 16
  86 0004 0446     		mov	r4, r0
 153:Src/sd_diskio_dma_rtos.c ****   Stat = STA_NOINIT;
  87              		.loc 1 153 0
  88 0006 0122     		movs	r2, #1
  89 0008 114B     		ldr	r3, .L12
  90 000a 1A70     		strb	r2, [r3]
 154:Src/sd_diskio_dma_rtos.c ****   /*
 155:Src/sd_diskio_dma_rtos.c ****    * check that the kernel has been started before continuing
 156:Src/sd_diskio_dma_rtos.c ****    * as the osMessage API will fail otherwise
 157:Src/sd_diskio_dma_rtos.c ****    */
 158:Src/sd_diskio_dma_rtos.c ****   if(osKernelRunning())
  91              		.loc 1 158 0
  92 000c FFF7FEFF 		bl	osKernelRunning
  93              	.LVL3:
  94 0010 18B9     		cbnz	r0, .L10
  95              	.L7:
 159:Src/sd_diskio_dma_rtos.c ****   {
 160:Src/sd_diskio_dma_rtos.c **** #if !defined(DISABLE_SD_INIT)
 161:Src/sd_diskio_dma_rtos.c **** 
 162:Src/sd_diskio_dma_rtos.c ****     if(BSP_SD_Init() == MSD_OK)
 163:Src/sd_diskio_dma_rtos.c ****     {
 164:Src/sd_diskio_dma_rtos.c ****       Stat = SD_CheckStatus(lun);
 165:Src/sd_diskio_dma_rtos.c ****     }
 166:Src/sd_diskio_dma_rtos.c **** 
 167:Src/sd_diskio_dma_rtos.c **** #else
 168:Src/sd_diskio_dma_rtos.c ****     Stat = SD_CheckStatus(lun);
 169:Src/sd_diskio_dma_rtos.c **** #endif
 170:Src/sd_diskio_dma_rtos.c **** 
 171:Src/sd_diskio_dma_rtos.c ****     /*
 172:Src/sd_diskio_dma_rtos.c ****      * if the SD is correctly initialized, create the operation queue
 173:Src/sd_diskio_dma_rtos.c ****      */
 174:Src/sd_diskio_dma_rtos.c **** 
 175:Src/sd_diskio_dma_rtos.c ****     if (Stat != STA_NOINIT)
 176:Src/sd_diskio_dma_rtos.c ****     {
 177:Src/sd_diskio_dma_rtos.c ****       osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 178:Src/sd_diskio_dma_rtos.c ****       SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 179:Src/sd_diskio_dma_rtos.c ****     }
 180:Src/sd_diskio_dma_rtos.c ****   }
 181:Src/sd_diskio_dma_rtos.c **** 
 182:Src/sd_diskio_dma_rtos.c ****   return Stat;
  96              		.loc 1 182 0
  97 0012 0F4B     		ldr	r3, .L12
  98 0014 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 183:Src/sd_diskio_dma_rtos.c **** }
  99              		.loc 1 183 0
 100 0016 02B0     		add	sp, sp, #8
 101              	.LCFI3:
 102              		.cfi_remember_state
 103              		.cfi_def_cfa_offset 8
 104              		@ sp needed
 105 0018 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 6


 106              	.L10:
 107              	.LCFI4:
 108              		.cfi_restore_state
 162:Src/sd_diskio_dma_rtos.c ****     {
 109              		.loc 1 162 0
 110 001a FFF7FEFF 		bl	BSP_SD_Init
 111              	.LVL4:
 112 001e 80B1     		cbz	r0, .L11
 113              	.L8:
 175:Src/sd_diskio_dma_rtos.c ****     {
 114              		.loc 1 175 0
 115 0020 0B4B     		ldr	r3, .L12
 116 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 117 0024 DBB2     		uxtb	r3, r3
 118 0026 012B     		cmp	r3, #1
 119 0028 F3D0     		beq	.L7
 120              	.LBB2:
 177:Src/sd_diskio_dma_rtos.c ****       SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 121              		.loc 1 177 0
 122 002a 0A4A     		ldr	r2, .L12+4
 123 002c 92E80300 		ldm	r2, {r0, r1}
 124 0030 8DE80300 		stm	sp, {r0, r1}
 178:Src/sd_diskio_dma_rtos.c ****     }
 125              		.loc 1 178 0
 126 0034 0021     		movs	r1, #0
 127 0036 6846     		mov	r0, sp
 128 0038 FFF7FEFF 		bl	osMessageCreate
 129              	.LVL5:
 130 003c 064B     		ldr	r3, .L12+8
 131 003e 1860     		str	r0, [r3]
 132 0040 E7E7     		b	.L7
 133              	.L11:
 134              	.LBE2:
 164:Src/sd_diskio_dma_rtos.c ****     }
 135              		.loc 1 164 0
 136 0042 2046     		mov	r0, r4
 137 0044 FFF7FEFF 		bl	SD_CheckStatus
 138              	.LVL6:
 139 0048 014B     		ldr	r3, .L12
 140 004a 1870     		strb	r0, [r3]
 141 004c E8E7     		b	.L8
 142              	.L13:
 143 004e 00BF     		.align	2
 144              	.L12:
 145 0050 00000000 		.word	.LANCHOR0
 146 0054 00000000 		.word	.LANCHOR1
 147 0058 00000000 		.word	.LANCHOR2
 148              		.cfi_endproc
 149              	.LFE142:
 151              		.section	.text.SD_status,"ax",%progbits
 152              		.align	1
 153              		.global	SD_status
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 157              		.fpu fpv5-sp-d16
 159              	SD_status:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 7


 160              	.LFB143:
 184:Src/sd_diskio_dma_rtos.c **** 
 185:Src/sd_diskio_dma_rtos.c **** /**
 186:Src/sd_diskio_dma_rtos.c ****   * @brief  Gets Disk Status
 187:Src/sd_diskio_dma_rtos.c ****   * @param  lun : not used
 188:Src/sd_diskio_dma_rtos.c ****   * @retval DSTATUS: Operation status
 189:Src/sd_diskio_dma_rtos.c ****   */
 190:Src/sd_diskio_dma_rtos.c **** DSTATUS SD_status(BYTE lun)
 191:Src/sd_diskio_dma_rtos.c **** {
 161              		.loc 1 191 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL7:
 166 0000 08B5     		push	{r3, lr}
 167              	.LCFI5:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 3, -8
 170              		.cfi_offset 14, -4
 192:Src/sd_diskio_dma_rtos.c ****   return SD_CheckStatus(lun);
 171              		.loc 1 192 0
 172 0002 FFF7FEFF 		bl	SD_CheckStatus
 173              	.LVL8:
 193:Src/sd_diskio_dma_rtos.c **** }
 174              		.loc 1 193 0
 175 0006 08BD     		pop	{r3, pc}
 176              		.cfi_endproc
 177              	.LFE143:
 179              		.section	.text.SD_read,"ax",%progbits
 180              		.align	1
 181              		.global	SD_read
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv5-sp-d16
 187              	SD_read:
 188              	.LFB144:
 194:Src/sd_diskio_dma_rtos.c **** 
 195:Src/sd_diskio_dma_rtos.c **** /**
 196:Src/sd_diskio_dma_rtos.c ****   * @brief  Reads Sector(s)
 197:Src/sd_diskio_dma_rtos.c ****   * @param  lun : not used
 198:Src/sd_diskio_dma_rtos.c ****   * @param  *buff: Data buffer to store read data
 199:Src/sd_diskio_dma_rtos.c ****   * @param  sector: Sector address (LBA)
 200:Src/sd_diskio_dma_rtos.c ****   * @param  count: Number of sectors to read (1..128)
 201:Src/sd_diskio_dma_rtos.c ****   * @retval DRESULT: Operation result
 202:Src/sd_diskio_dma_rtos.c ****   */
 203:Src/sd_diskio_dma_rtos.c **** DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 204:Src/sd_diskio_dma_rtos.c **** {
 189              		.loc 1 204 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 16
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              	.LVL9:
 194 0000 10B5     		push	{r4, lr}
 195              	.LCFI6:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 4, -8
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 8


 198              		.cfi_offset 14, -4
 199 0002 84B0     		sub	sp, sp, #16
 200              	.LCFI7:
 201              		.cfi_def_cfa_offset 24
 202 0004 0846     		mov	r0, r1
 203              	.LVL10:
 204 0006 1146     		mov	r1, r2
 205              	.LVL11:
 205:Src/sd_diskio_dma_rtos.c ****   DRESULT res = RES_ERROR;
 206:Src/sd_diskio_dma_rtos.c ****   osEvent event;
 207:Src/sd_diskio_dma_rtos.c ****   uint32_t timer;
 208:Src/sd_diskio_dma_rtos.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 209:Src/sd_diskio_dma_rtos.c ****   uint32_t alignedAddr;
 210:Src/sd_diskio_dma_rtos.c **** #endif
 211:Src/sd_diskio_dma_rtos.c **** 
 212:Src/sd_diskio_dma_rtos.c ****   if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 206              		.loc 1 212 0
 207 0008 1A46     		mov	r2, r3
 208              	.LVL12:
 209 000a FFF7FEFF 		bl	BSP_SD_ReadBlocks_DMA
 210              	.LVL13:
 211 000e 10B1     		cbz	r0, .L25
 205:Src/sd_diskio_dma_rtos.c ****   DRESULT res = RES_ERROR;
 212              		.loc 1 205 0
 213 0010 0120     		movs	r0, #1
 214              	.L17:
 215              	.LVL14:
 213:Src/sd_diskio_dma_rtos.c ****                            (uint32_t) (sector),
 214:Src/sd_diskio_dma_rtos.c ****                            count) == MSD_OK)
 215:Src/sd_diskio_dma_rtos.c ****   {
 216:Src/sd_diskio_dma_rtos.c ****     /* wait for a message from the queue or a timeout */
 217:Src/sd_diskio_dma_rtos.c ****     event = osMessageGet(SDQueueID, SD_TIMEOUT);
 218:Src/sd_diskio_dma_rtos.c **** 
 219:Src/sd_diskio_dma_rtos.c ****     if (event.status == osEventMessage)
 220:Src/sd_diskio_dma_rtos.c ****     {
 221:Src/sd_diskio_dma_rtos.c ****       if (event.value.v == READ_CPLT_MSG)
 222:Src/sd_diskio_dma_rtos.c ****       {
 223:Src/sd_diskio_dma_rtos.c ****         timer = osKernelSysTick() + SD_TIMEOUT;
 224:Src/sd_diskio_dma_rtos.c ****         /* block until SDIO IP is ready or a timeout occur */
 225:Src/sd_diskio_dma_rtos.c ****         while(timer > osKernelSysTick())
 226:Src/sd_diskio_dma_rtos.c ****         {
 227:Src/sd_diskio_dma_rtos.c ****           if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 228:Src/sd_diskio_dma_rtos.c ****           {
 229:Src/sd_diskio_dma_rtos.c ****             res = RES_OK;
 230:Src/sd_diskio_dma_rtos.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 231:Src/sd_diskio_dma_rtos.c ****             /*
 232:Src/sd_diskio_dma_rtos.c ****                the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
 233:Src/sd_diskio_dma_rtos.c ****                adjust the address and the D-Cache size to invalidate accordingly.
 234:Src/sd_diskio_dma_rtos.c ****              */
 235:Src/sd_diskio_dma_rtos.c ****             alignedAddr = (uint32_t)buff & ~0x1F;
 236:Src/sd_diskio_dma_rtos.c ****             SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff 
 237:Src/sd_diskio_dma_rtos.c **** #endif
 238:Src/sd_diskio_dma_rtos.c ****             break;
 239:Src/sd_diskio_dma_rtos.c ****           }
 240:Src/sd_diskio_dma_rtos.c ****           vTaskDelay(1); // patch
 241:Src/sd_diskio_dma_rtos.c ****         }
 242:Src/sd_diskio_dma_rtos.c ****       }
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 9


 243:Src/sd_diskio_dma_rtos.c ****     }
 244:Src/sd_diskio_dma_rtos.c ****   }
 245:Src/sd_diskio_dma_rtos.c **** 
 246:Src/sd_diskio_dma_rtos.c ****   return res;
 247:Src/sd_diskio_dma_rtos.c **** }
 216              		.loc 1 247 0
 217 0012 04B0     		add	sp, sp, #16
 218              	.LCFI8:
 219              		.cfi_remember_state
 220              		.cfi_def_cfa_offset 8
 221              		@ sp needed
 222 0014 10BD     		pop	{r4, pc}
 223              	.LVL15:
 224              	.L25:
 225              	.LCFI9:
 226              		.cfi_restore_state
 217:Src/sd_diskio_dma_rtos.c **** 
 227              		.loc 1 217 0
 228 0016 47F23052 		movw	r2, #30000
 229 001a 114B     		ldr	r3, .L29
 230 001c 1968     		ldr	r1, [r3]
 231 001e 01A8     		add	r0, sp, #4
 232 0020 FFF7FEFF 		bl	osMessageGet
 233              	.LVL16:
 219:Src/sd_diskio_dma_rtos.c ****     {
 234              		.loc 1 219 0
 235 0024 019B     		ldr	r3, [sp, #4]
 236 0026 102B     		cmp	r3, #16
 237 0028 01D0     		beq	.L26
 205:Src/sd_diskio_dma_rtos.c ****   osEvent event;
 238              		.loc 1 205 0
 239 002a 0120     		movs	r0, #1
 240 002c F1E7     		b	.L17
 241              	.L26:
 221:Src/sd_diskio_dma_rtos.c ****       {
 242              		.loc 1 221 0
 243 002e 029B     		ldr	r3, [sp, #8]
 244 0030 012B     		cmp	r3, #1
 245 0032 01D0     		beq	.L27
 205:Src/sd_diskio_dma_rtos.c ****   osEvent event;
 246              		.loc 1 205 0
 247 0034 0120     		movs	r0, #1
 248 0036 ECE7     		b	.L17
 249              	.L27:
 223:Src/sd_diskio_dma_rtos.c ****         /* block until SDIO IP is ready or a timeout occur */
 250              		.loc 1 223 0
 251 0038 FFF7FEFF 		bl	osKernelSysTick
 252              	.LVL17:
 253 003c 47F23054 		movw	r4, #30000
 254 0040 0444     		add	r4, r4, r0
 255              	.LVL18:
 256              	.L18:
 225:Src/sd_diskio_dma_rtos.c ****         {
 257              		.loc 1 225 0
 258 0042 FFF7FEFF 		bl	osKernelSysTick
 259              	.LVL19:
 260 0046 8442     		cmp	r4, r0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 10


 261 0048 06D9     		bls	.L28
 227:Src/sd_diskio_dma_rtos.c ****           {
 262              		.loc 1 227 0
 263 004a FFF7FEFF 		bl	BSP_SD_GetCardState
 264              	.LVL20:
 265 004e 28B1     		cbz	r0, .L23
 240:Src/sd_diskio_dma_rtos.c ****         }
 266              		.loc 1 240 0
 267 0050 0120     		movs	r0, #1
 268 0052 FFF7FEFF 		bl	vTaskDelay
 269              	.LVL21:
 270 0056 F4E7     		b	.L18
 271              	.L28:
 205:Src/sd_diskio_dma_rtos.c ****   osEvent event;
 272              		.loc 1 205 0
 273 0058 0120     		movs	r0, #1
 274 005a DAE7     		b	.L17
 275              	.L23:
 229:Src/sd_diskio_dma_rtos.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 276              		.loc 1 229 0
 277 005c 0020     		movs	r0, #0
 278 005e D8E7     		b	.L17
 279              	.L30:
 280              		.align	2
 281              	.L29:
 282 0060 00000000 		.word	.LANCHOR2
 283              		.cfi_endproc
 284              	.LFE144:
 286              		.section	.text.SD_write,"ax",%progbits
 287              		.align	1
 288              		.global	SD_write
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv5-sp-d16
 294              	SD_write:
 295              	.LFB145:
 248:Src/sd_diskio_dma_rtos.c **** 
 249:Src/sd_diskio_dma_rtos.c **** /**
 250:Src/sd_diskio_dma_rtos.c ****   * @brief  Writes Sector(s)
 251:Src/sd_diskio_dma_rtos.c ****   * @param  lun : not used
 252:Src/sd_diskio_dma_rtos.c ****   * @param  *buff: Data to be written
 253:Src/sd_diskio_dma_rtos.c ****   * @param  sector: Sector address (LBA)
 254:Src/sd_diskio_dma_rtos.c ****   * @param  count: Number of sectors to write (1..128)
 255:Src/sd_diskio_dma_rtos.c ****   * @retval DRESULT: Operation result
 256:Src/sd_diskio_dma_rtos.c ****   */
 257:Src/sd_diskio_dma_rtos.c **** #if _USE_WRITE == 1
 258:Src/sd_diskio_dma_rtos.c **** DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
 259:Src/sd_diskio_dma_rtos.c **** {
 296              		.loc 1 259 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 16
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              	.LVL22:
 301 0000 10B5     		push	{r4, lr}
 302              	.LCFI10:
 303              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 11


 304              		.cfi_offset 4, -8
 305              		.cfi_offset 14, -4
 306 0002 84B0     		sub	sp, sp, #16
 307              	.LCFI11:
 308              		.cfi_def_cfa_offset 24
 309 0004 0846     		mov	r0, r1
 310              	.LVL23:
 311 0006 1146     		mov	r1, r2
 312              	.LVL24:
 260:Src/sd_diskio_dma_rtos.c ****   osEvent event;
 261:Src/sd_diskio_dma_rtos.c ****   DRESULT res = RES_ERROR;
 262:Src/sd_diskio_dma_rtos.c ****   uint32_t timer;
 263:Src/sd_diskio_dma_rtos.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 264:Src/sd_diskio_dma_rtos.c ****   uint32_t alignedAddr;
 265:Src/sd_diskio_dma_rtos.c ****   /*
 266:Src/sd_diskio_dma_rtos.c ****     the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
 267:Src/sd_diskio_dma_rtos.c ****     adjust the address and the D-Cache size to clean accordingly.
 268:Src/sd_diskio_dma_rtos.c ****   */
 269:Src/sd_diskio_dma_rtos.c ****   alignedAddr = (uint32_t)buff & ~0x1F;
 270:Src/sd_diskio_dma_rtos.c ****   SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr))
 271:Src/sd_diskio_dma_rtos.c **** #endif
 272:Src/sd_diskio_dma_rtos.c **** 
 273:Src/sd_diskio_dma_rtos.c **** 
 274:Src/sd_diskio_dma_rtos.c ****   if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 313              		.loc 1 274 0
 314 0008 1A46     		mov	r2, r3
 315              	.LVL25:
 316 000a FFF7FEFF 		bl	BSP_SD_WriteBlocks_DMA
 317              	.LVL26:
 318 000e 10B1     		cbz	r0, .L40
 261:Src/sd_diskio_dma_rtos.c ****   uint32_t timer;
 319              		.loc 1 261 0
 320 0010 0120     		movs	r0, #1
 321              	.L32:
 322              	.LVL27:
 275:Src/sd_diskio_dma_rtos.c ****                            (uint32_t) (sector),
 276:Src/sd_diskio_dma_rtos.c ****                            count) == MSD_OK)
 277:Src/sd_diskio_dma_rtos.c ****   {
 278:Src/sd_diskio_dma_rtos.c ****     /* Get the message from the queue */
 279:Src/sd_diskio_dma_rtos.c ****     event = osMessageGet(SDQueueID, SD_TIMEOUT);
 280:Src/sd_diskio_dma_rtos.c **** 
 281:Src/sd_diskio_dma_rtos.c ****     if (event.status == osEventMessage)
 282:Src/sd_diskio_dma_rtos.c ****     {
 283:Src/sd_diskio_dma_rtos.c ****       if (event.value.v == WRITE_CPLT_MSG)
 284:Src/sd_diskio_dma_rtos.c ****       {
 285:Src/sd_diskio_dma_rtos.c ****         timer = osKernelSysTick() + SD_TIMEOUT;
 286:Src/sd_diskio_dma_rtos.c ****         /* block until SDIO IP is ready or a timeout occur */
 287:Src/sd_diskio_dma_rtos.c ****         while(timer > osKernelSysTick())
 288:Src/sd_diskio_dma_rtos.c ****         {
 289:Src/sd_diskio_dma_rtos.c ****           if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 290:Src/sd_diskio_dma_rtos.c ****           {
 291:Src/sd_diskio_dma_rtos.c ****             res = RES_OK;
 292:Src/sd_diskio_dma_rtos.c ****             break;
 293:Src/sd_diskio_dma_rtos.c ****           }
 294:Src/sd_diskio_dma_rtos.c ****           vTaskDelay(1); // patch
 295:Src/sd_diskio_dma_rtos.c ****         }
 296:Src/sd_diskio_dma_rtos.c ****       }
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 12


 297:Src/sd_diskio_dma_rtos.c ****     }
 298:Src/sd_diskio_dma_rtos.c ****   }
 299:Src/sd_diskio_dma_rtos.c **** 
 300:Src/sd_diskio_dma_rtos.c ****   return res;
 301:Src/sd_diskio_dma_rtos.c **** }
 323              		.loc 1 301 0
 324 0012 04B0     		add	sp, sp, #16
 325              	.LCFI12:
 326              		.cfi_remember_state
 327              		.cfi_def_cfa_offset 8
 328              		@ sp needed
 329 0014 10BD     		pop	{r4, pc}
 330              	.LVL28:
 331              	.L40:
 332              	.LCFI13:
 333              		.cfi_restore_state
 279:Src/sd_diskio_dma_rtos.c **** 
 334              		.loc 1 279 0
 335 0016 47F23052 		movw	r2, #30000
 336 001a 114B     		ldr	r3, .L44
 337 001c 1968     		ldr	r1, [r3]
 338 001e 01A8     		add	r0, sp, #4
 339 0020 FFF7FEFF 		bl	osMessageGet
 340              	.LVL29:
 281:Src/sd_diskio_dma_rtos.c ****     {
 341              		.loc 1 281 0
 342 0024 019B     		ldr	r3, [sp, #4]
 343 0026 102B     		cmp	r3, #16
 344 0028 01D0     		beq	.L41
 261:Src/sd_diskio_dma_rtos.c ****   uint32_t timer;
 345              		.loc 1 261 0
 346 002a 0120     		movs	r0, #1
 347 002c F1E7     		b	.L32
 348              	.L41:
 283:Src/sd_diskio_dma_rtos.c ****       {
 349              		.loc 1 283 0
 350 002e 029B     		ldr	r3, [sp, #8]
 351 0030 022B     		cmp	r3, #2
 352 0032 01D0     		beq	.L42
 261:Src/sd_diskio_dma_rtos.c ****   uint32_t timer;
 353              		.loc 1 261 0
 354 0034 0120     		movs	r0, #1
 355 0036 ECE7     		b	.L32
 356              	.L42:
 285:Src/sd_diskio_dma_rtos.c ****         /* block until SDIO IP is ready or a timeout occur */
 357              		.loc 1 285 0
 358 0038 FFF7FEFF 		bl	osKernelSysTick
 359              	.LVL30:
 360 003c 47F23054 		movw	r4, #30000
 361 0040 0444     		add	r4, r4, r0
 362              	.LVL31:
 363              	.L33:
 287:Src/sd_diskio_dma_rtos.c ****         {
 364              		.loc 1 287 0
 365 0042 FFF7FEFF 		bl	osKernelSysTick
 366              	.LVL32:
 367 0046 8442     		cmp	r4, r0
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 13


 368 0048 06D9     		bls	.L43
 289:Src/sd_diskio_dma_rtos.c ****           {
 369              		.loc 1 289 0
 370 004a FFF7FEFF 		bl	BSP_SD_GetCardState
 371              	.LVL33:
 372 004e 28B1     		cbz	r0, .L38
 294:Src/sd_diskio_dma_rtos.c ****         }
 373              		.loc 1 294 0
 374 0050 0120     		movs	r0, #1
 375 0052 FFF7FEFF 		bl	vTaskDelay
 376              	.LVL34:
 377 0056 F4E7     		b	.L33
 378              	.L43:
 261:Src/sd_diskio_dma_rtos.c ****   uint32_t timer;
 379              		.loc 1 261 0
 380 0058 0120     		movs	r0, #1
 381 005a DAE7     		b	.L32
 382              	.L38:
 291:Src/sd_diskio_dma_rtos.c ****             break;
 383              		.loc 1 291 0
 384 005c 0020     		movs	r0, #0
 385 005e D8E7     		b	.L32
 386              	.L45:
 387              		.align	2
 388              	.L44:
 389 0060 00000000 		.word	.LANCHOR2
 390              		.cfi_endproc
 391              	.LFE145:
 393              		.section	.text.SD_ioctl,"ax",%progbits
 394              		.align	1
 395              		.global	SD_ioctl
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 399              		.fpu fpv5-sp-d16
 401              	SD_ioctl:
 402              	.LFB146:
 302:Src/sd_diskio_dma_rtos.c **** #endif /* _USE_WRITE == 1 */
 303:Src/sd_diskio_dma_rtos.c **** 
 304:Src/sd_diskio_dma_rtos.c **** /**
 305:Src/sd_diskio_dma_rtos.c ****   * @brief  I/O control operation
 306:Src/sd_diskio_dma_rtos.c ****   * @param  lun : not used
 307:Src/sd_diskio_dma_rtos.c ****   * @param  cmd: Control code
 308:Src/sd_diskio_dma_rtos.c ****   * @param  *buff: Buffer to send/receive control data
 309:Src/sd_diskio_dma_rtos.c ****   * @retval DRESULT: Operation result
 310:Src/sd_diskio_dma_rtos.c ****   */
 311:Src/sd_diskio_dma_rtos.c **** #if _USE_IOCTL == 1
 312:Src/sd_diskio_dma_rtos.c **** DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
 313:Src/sd_diskio_dma_rtos.c **** {
 403              		.loc 1 313 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 32
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              	.LVL35:
 314:Src/sd_diskio_dma_rtos.c ****   DRESULT res = RES_ERROR;
 315:Src/sd_diskio_dma_rtos.c ****   BSP_SD_CardInfo CardInfo;
 316:Src/sd_diskio_dma_rtos.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 14


 317:Src/sd_diskio_dma_rtos.c ****   if (Stat & STA_NOINIT) return RES_NOTRDY;
 408              		.loc 1 317 0
 409 0000 154B     		ldr	r3, .L60
 410 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 411 0004 13F0010F 		tst	r3, #1
 412 0008 01D0     		beq	.L59
 413 000a 0320     		movs	r0, #3
 414              	.LVL36:
 415 000c 7047     		bx	lr
 416              	.LVL37:
 417              	.L59:
 313:Src/sd_diskio_dma_rtos.c ****   DRESULT res = RES_ERROR;
 418              		.loc 1 313 0
 419 000e 10B5     		push	{r4, lr}
 420              	.LCFI14:
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 4, -8
 423              		.cfi_offset 14, -4
 424 0010 88B0     		sub	sp, sp, #32
 425              	.LCFI15:
 426              		.cfi_def_cfa_offset 40
 427 0012 1446     		mov	r4, r2
 318:Src/sd_diskio_dma_rtos.c **** 
 319:Src/sd_diskio_dma_rtos.c ****   switch (cmd)
 428              		.loc 1 319 0
 429 0014 0329     		cmp	r1, #3
 430 0016 1CD8     		bhi	.L54
 431 0018 DFE801F0 		tbb	[pc, r1]
 432              	.L49:
 433 001c 02       		.byte	(.L48-.L49)/2
 434 001d 05       		.byte	(.L50-.L49)/2
 435 001e 0C       		.byte	(.L51-.L49)/2
 436 001f 13       		.byte	(.L52-.L49)/2
 437              		.p2align 1
 438              	.L48:
 320:Src/sd_diskio_dma_rtos.c ****   {
 321:Src/sd_diskio_dma_rtos.c ****   /* Make sure that no pending write process */
 322:Src/sd_diskio_dma_rtos.c ****   case CTRL_SYNC :
 323:Src/sd_diskio_dma_rtos.c ****     res = RES_OK;
 439              		.loc 1 323 0
 440 0020 0020     		movs	r0, #0
 441              	.LVL38:
 442              	.L47:
 324:Src/sd_diskio_dma_rtos.c ****     break;
 325:Src/sd_diskio_dma_rtos.c **** 
 326:Src/sd_diskio_dma_rtos.c ****   /* Get number of sectors on the disk (DWORD) */
 327:Src/sd_diskio_dma_rtos.c ****   case GET_SECTOR_COUNT :
 328:Src/sd_diskio_dma_rtos.c ****     BSP_SD_GetCardInfo(&CardInfo);
 329:Src/sd_diskio_dma_rtos.c ****     *(DWORD*)buff = CardInfo.LogBlockNbr;
 330:Src/sd_diskio_dma_rtos.c ****     res = RES_OK;
 331:Src/sd_diskio_dma_rtos.c ****     break;
 332:Src/sd_diskio_dma_rtos.c **** 
 333:Src/sd_diskio_dma_rtos.c ****   /* Get R/W sector size (WORD) */
 334:Src/sd_diskio_dma_rtos.c ****   case GET_SECTOR_SIZE :
 335:Src/sd_diskio_dma_rtos.c ****     BSP_SD_GetCardInfo(&CardInfo);
 336:Src/sd_diskio_dma_rtos.c ****     *(WORD*)buff = CardInfo.LogBlockSize;
 337:Src/sd_diskio_dma_rtos.c ****     res = RES_OK;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 15


 338:Src/sd_diskio_dma_rtos.c ****     break;
 339:Src/sd_diskio_dma_rtos.c **** 
 340:Src/sd_diskio_dma_rtos.c ****   /* Get erase block size in unit of sector (DWORD) */
 341:Src/sd_diskio_dma_rtos.c ****   case GET_BLOCK_SIZE :
 342:Src/sd_diskio_dma_rtos.c ****     BSP_SD_GetCardInfo(&CardInfo);
 343:Src/sd_diskio_dma_rtos.c ****     *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 344:Src/sd_diskio_dma_rtos.c **** 	res = RES_OK;
 345:Src/sd_diskio_dma_rtos.c ****     break;
 346:Src/sd_diskio_dma_rtos.c **** 
 347:Src/sd_diskio_dma_rtos.c ****   default:
 348:Src/sd_diskio_dma_rtos.c ****     res = RES_PARERR;
 349:Src/sd_diskio_dma_rtos.c ****   }
 350:Src/sd_diskio_dma_rtos.c **** 
 351:Src/sd_diskio_dma_rtos.c ****   return res;
 352:Src/sd_diskio_dma_rtos.c **** }
 443              		.loc 1 352 0
 444 0022 08B0     		add	sp, sp, #32
 445              	.LCFI16:
 446              		.cfi_remember_state
 447              		.cfi_def_cfa_offset 8
 448              		@ sp needed
 449 0024 10BD     		pop	{r4, pc}
 450              	.LVL39:
 451              	.L50:
 452              	.LCFI17:
 453              		.cfi_restore_state
 328:Src/sd_diskio_dma_rtos.c ****     *(DWORD*)buff = CardInfo.LogBlockNbr;
 454              		.loc 1 328 0
 455 0026 6846     		mov	r0, sp
 456              	.LVL40:
 457 0028 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 458              	.LVL41:
 329:Src/sd_diskio_dma_rtos.c ****     res = RES_OK;
 459              		.loc 1 329 0
 460 002c 069B     		ldr	r3, [sp, #24]
 461 002e 2360     		str	r3, [r4]
 462              	.LVL42:
 330:Src/sd_diskio_dma_rtos.c ****     break;
 463              		.loc 1 330 0
 464 0030 0020     		movs	r0, #0
 331:Src/sd_diskio_dma_rtos.c **** 
 465              		.loc 1 331 0
 466 0032 F6E7     		b	.L47
 467              	.LVL43:
 468              	.L51:
 335:Src/sd_diskio_dma_rtos.c ****     *(WORD*)buff = CardInfo.LogBlockSize;
 469              		.loc 1 335 0
 470 0034 6846     		mov	r0, sp
 471              	.LVL44:
 472 0036 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 473              	.LVL45:
 336:Src/sd_diskio_dma_rtos.c ****     res = RES_OK;
 474              		.loc 1 336 0
 475 003a 079B     		ldr	r3, [sp, #28]
 476 003c 2380     		strh	r3, [r4]	@ movhi
 477              	.LVL46:
 337:Src/sd_diskio_dma_rtos.c ****     break;
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 16


 478              		.loc 1 337 0
 479 003e 0020     		movs	r0, #0
 338:Src/sd_diskio_dma_rtos.c **** 
 480              		.loc 1 338 0
 481 0040 EFE7     		b	.L47
 482              	.LVL47:
 483              	.L52:
 342:Src/sd_diskio_dma_rtos.c ****     *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 484              		.loc 1 342 0
 485 0042 6846     		mov	r0, sp
 486              	.LVL48:
 487 0044 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 488              	.LVL49:
 343:Src/sd_diskio_dma_rtos.c **** 	res = RES_OK;
 489              		.loc 1 343 0
 490 0048 079B     		ldr	r3, [sp, #28]
 491 004a 5B0A     		lsrs	r3, r3, #9
 492 004c 2360     		str	r3, [r4]
 493              	.LVL50:
 344:Src/sd_diskio_dma_rtos.c ****     break;
 494              		.loc 1 344 0
 495 004e 0020     		movs	r0, #0
 345:Src/sd_diskio_dma_rtos.c **** 
 496              		.loc 1 345 0
 497 0050 E7E7     		b	.L47
 498              	.LVL51:
 499              	.L54:
 348:Src/sd_diskio_dma_rtos.c ****   }
 500              		.loc 1 348 0
 501 0052 0420     		movs	r0, #4
 502              	.LVL52:
 503 0054 E5E7     		b	.L47
 504              	.L61:
 505 0056 00BF     		.align	2
 506              	.L60:
 507 0058 00000000 		.word	.LANCHOR0
 508              		.cfi_endproc
 509              	.LFE146:
 511              		.section	.text.BSP_SD_WriteCpltCallback,"ax",%progbits
 512              		.align	1
 513              		.global	BSP_SD_WriteCpltCallback
 514              		.syntax unified
 515              		.thumb
 516              		.thumb_func
 517              		.fpu fpv5-sp-d16
 519              	BSP_SD_WriteCpltCallback:
 520              	.LFB147:
 353:Src/sd_diskio_dma_rtos.c **** #endif /* _USE_IOCTL == 1 */
 354:Src/sd_diskio_dma_rtos.c **** 
 355:Src/sd_diskio_dma_rtos.c **** 
 356:Src/sd_diskio_dma_rtos.c **** 
 357:Src/sd_diskio_dma_rtos.c **** /**
 358:Src/sd_diskio_dma_rtos.c ****   * @brief Tx Transfer completed callbacks
 359:Src/sd_diskio_dma_rtos.c ****   * @param None
 360:Src/sd_diskio_dma_rtos.c ****   * @retval None
 361:Src/sd_diskio_dma_rtos.c ****   */
 362:Src/sd_diskio_dma_rtos.c **** void BSP_SD_WriteCpltCallback( void )
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 17


 363:Src/sd_diskio_dma_rtos.c **** {
 521              		.loc 1 363 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525 0000 08B5     		push	{r3, lr}
 526              	.LCFI18:
 527              		.cfi_def_cfa_offset 8
 528              		.cfi_offset 3, -8
 529              		.cfi_offset 14, -4
 364:Src/sd_diskio_dma_rtos.c ****   /*
 365:Src/sd_diskio_dma_rtos.c ****    * No need to add an "osKernelRunning()" check here, as the SD_initialize()
 366:Src/sd_diskio_dma_rtos.c ****    * is always called before any SD_Read()/SD_Write() call
 367:Src/sd_diskio_dma_rtos.c ****    */
 368:Src/sd_diskio_dma_rtos.c ****   osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 530              		.loc 1 368 0
 531 0002 4FF0FF32 		mov	r2, #-1
 532 0006 0221     		movs	r1, #2
 533 0008 024B     		ldr	r3, .L64
 534 000a 1868     		ldr	r0, [r3]
 535 000c FFF7FEFF 		bl	osMessagePut
 536              	.LVL53:
 537 0010 08BD     		pop	{r3, pc}
 538              	.L65:
 539 0012 00BF     		.align	2
 540              	.L64:
 541 0014 00000000 		.word	.LANCHOR2
 542              		.cfi_endproc
 543              	.LFE147:
 545              		.section	.text.BSP_SD_ReadCpltCallback,"ax",%progbits
 546              		.align	1
 547              		.global	BSP_SD_ReadCpltCallback
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 551              		.fpu fpv5-sp-d16
 553              	BSP_SD_ReadCpltCallback:
 554              	.LFB148:
 369:Src/sd_diskio_dma_rtos.c **** }
 370:Src/sd_diskio_dma_rtos.c **** 
 371:Src/sd_diskio_dma_rtos.c **** /**
 372:Src/sd_diskio_dma_rtos.c ****   * @brief Rx Transfer completed callbacks
 373:Src/sd_diskio_dma_rtos.c ****   * @param None
 374:Src/sd_diskio_dma_rtos.c ****   * @retval None
 375:Src/sd_diskio_dma_rtos.c ****   */
 376:Src/sd_diskio_dma_rtos.c **** void BSP_SD_ReadCpltCallback( void )
 377:Src/sd_diskio_dma_rtos.c **** {
 555              		.loc 1 377 0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 0
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559 0000 08B5     		push	{r3, lr}
 560              	.LCFI19:
 561              		.cfi_def_cfa_offset 8
 562              		.cfi_offset 3, -8
 563              		.cfi_offset 14, -4
 378:Src/sd_diskio_dma_rtos.c ****   /*
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 18


 379:Src/sd_diskio_dma_rtos.c ****    * No need to add an "osKernelRunning()" check here, as the SD_initialize()
 380:Src/sd_diskio_dma_rtos.c ****    * is always called before any SD_Read()/SD_Write() call
 381:Src/sd_diskio_dma_rtos.c ****    */
 382:Src/sd_diskio_dma_rtos.c ****   osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 564              		.loc 1 382 0
 565 0002 4FF0FF32 		mov	r2, #-1
 566 0006 0121     		movs	r1, #1
 567 0008 024B     		ldr	r3, .L68
 568 000a 1868     		ldr	r0, [r3]
 569 000c FFF7FEFF 		bl	osMessagePut
 570              	.LVL54:
 571 0010 08BD     		pop	{r3, pc}
 572              	.L69:
 573 0012 00BF     		.align	2
 574              	.L68:
 575 0014 00000000 		.word	.LANCHOR2
 576              		.cfi_endproc
 577              	.LFE148:
 579              		.section	.text.BSP_SD_AbortCallback,"ax",%progbits
 580              		.align	1
 581              		.global	BSP_SD_AbortCallback
 582              		.syntax unified
 583              		.thumb
 584              		.thumb_func
 585              		.fpu fpv5-sp-d16
 587              	BSP_SD_AbortCallback:
 588              	.LFB149:
 383:Src/sd_diskio_dma_rtos.c **** }
 384:Src/sd_diskio_dma_rtos.c **** 
 385:Src/sd_diskio_dma_rtos.c **** /**
 386:Src/sd_diskio_dma_rtos.c ****   * @brief Rx Transfer completed callbacks
 387:Src/sd_diskio_dma_rtos.c ****   * @param None
 388:Src/sd_diskio_dma_rtos.c ****   * @retval None
 389:Src/sd_diskio_dma_rtos.c ****   */
 390:Src/sd_diskio_dma_rtos.c **** void BSP_SD_AbortCallback( void )
 391:Src/sd_diskio_dma_rtos.c **** {
 589              		.loc 1 391 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593 0000 08B5     		push	{r3, lr}
 594              	.LCFI20:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 3, -8
 597              		.cfi_offset 14, -4
 392:Src/sd_diskio_dma_rtos.c ****   /*
 393:Src/sd_diskio_dma_rtos.c ****    * No need to add an "osKernelRunning()" check here, as the SD_initialize()
 394:Src/sd_diskio_dma_rtos.c ****    * is always called before any SD_Read()/SD_Write() call
 395:Src/sd_diskio_dma_rtos.c ****    */
 396:Src/sd_diskio_dma_rtos.c ****    osMessagePut(SDQueueID, ABORT_MSG, osWaitForever);
 598              		.loc 1 396 0
 599 0002 4FF0FF32 		mov	r2, #-1
 600 0006 0321     		movs	r1, #3
 601 0008 024B     		ldr	r3, .L72
 602 000a 1868     		ldr	r0, [r3]
 603 000c FFF7FEFF 		bl	osMessagePut
 604              	.LVL55:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 19


 605 0010 08BD     		pop	{r3, pc}
 606              	.L73:
 607 0012 00BF     		.align	2
 608              	.L72:
 609 0014 00000000 		.word	.LANCHOR2
 610              		.cfi_endproc
 611              	.LFE149:
 613              		.section	.text.DMA2_Stream3_IRQHandler,"ax",%progbits
 614              		.align	1
 615              		.global	DMA2_Stream3_IRQHandler
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 619              		.fpu fpv5-sp-d16
 621              	DMA2_Stream3_IRQHandler:
 622              	.LFB150:
 397:Src/sd_diskio_dma_rtos.c **** }
 398:Src/sd_diskio_dma_rtos.c **** 
 399:Src/sd_diskio_dma_rtos.c **** extern SD_HandleTypeDef uSdHandle;
 400:Src/sd_diskio_dma_rtos.c **** 
 401:Src/sd_diskio_dma_rtos.c **** /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
 402:Src/sd_diskio_dma_rtos.c **** /**
 403:Src/sd_diskio_dma_rtos.c ****   * @brief  This function handles DMA2 Stream 3 interrupt request.
 404:Src/sd_diskio_dma_rtos.c ****   * @param  None
 405:Src/sd_diskio_dma_rtos.c ****   * @retval None
 406:Src/sd_diskio_dma_rtos.c ****   */
 407:Src/sd_diskio_dma_rtos.c **** void DMA2_Stream3_IRQHandler(void)
 408:Src/sd_diskio_dma_rtos.c **** {
 623              		.loc 1 408 0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627 0000 08B5     		push	{r3, lr}
 628              	.LCFI21:
 629              		.cfi_def_cfa_offset 8
 630              		.cfi_offset 3, -8
 631              		.cfi_offset 14, -4
 409:Src/sd_diskio_dma_rtos.c ****   HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 632              		.loc 1 409 0
 633 0002 024B     		ldr	r3, .L76
 634 0004 D86B     		ldr	r0, [r3, #60]
 635 0006 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 636              	.LVL56:
 637 000a 08BD     		pop	{r3, pc}
 638              	.L77:
 639              		.align	2
 640              	.L76:
 641 000c 00000000 		.word	uSdHandle
 642              		.cfi_endproc
 643              	.LFE150:
 645              		.section	.text.DMA2_Stream6_IRQHandler,"ax",%progbits
 646              		.align	1
 647              		.global	DMA2_Stream6_IRQHandler
 648              		.syntax unified
 649              		.thumb
 650              		.thumb_func
 651              		.fpu fpv5-sp-d16
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 20


 653              	DMA2_Stream6_IRQHandler:
 654              	.LFB151:
 410:Src/sd_diskio_dma_rtos.c **** }
 411:Src/sd_diskio_dma_rtos.c **** 
 412:Src/sd_diskio_dma_rtos.c **** /**
 413:Src/sd_diskio_dma_rtos.c ****   * @brief  This function handles DMA2 Stream 6 interrupt request.
 414:Src/sd_diskio_dma_rtos.c ****   * @param  None
 415:Src/sd_diskio_dma_rtos.c ****   * @retval None
 416:Src/sd_diskio_dma_rtos.c ****   */
 417:Src/sd_diskio_dma_rtos.c **** void DMA2_Stream6_IRQHandler(void)
 418:Src/sd_diskio_dma_rtos.c **** {
 655              		.loc 1 418 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659 0000 08B5     		push	{r3, lr}
 660              	.LCFI22:
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 3, -8
 663              		.cfi_offset 14, -4
 419:Src/sd_diskio_dma_rtos.c ****   HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 664              		.loc 1 419 0
 665 0002 024B     		ldr	r3, .L80
 666 0004 186C     		ldr	r0, [r3, #64]
 667 0006 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 668              	.LVL57:
 669 000a 08BD     		pop	{r3, pc}
 670              	.L81:
 671              		.align	2
 672              	.L80:
 673 000c 00000000 		.word	uSdHandle
 674              		.cfi_endproc
 675              	.LFE151:
 677              		.section	.text.SDMMC1_IRQHandler,"ax",%progbits
 678              		.align	1
 679              		.global	SDMMC1_IRQHandler
 680              		.syntax unified
 681              		.thumb
 682              		.thumb_func
 683              		.fpu fpv5-sp-d16
 685              	SDMMC1_IRQHandler:
 686              	.LFB152:
 420:Src/sd_diskio_dma_rtos.c **** }
 421:Src/sd_diskio_dma_rtos.c **** 
 422:Src/sd_diskio_dma_rtos.c **** /**
 423:Src/sd_diskio_dma_rtos.c ****   * @brief  This function handles SDIO interrupt request.
 424:Src/sd_diskio_dma_rtos.c ****   * @param  None
 425:Src/sd_diskio_dma_rtos.c ****   * @retval None
 426:Src/sd_diskio_dma_rtos.c ****   */
 427:Src/sd_diskio_dma_rtos.c **** void SDMMC1_IRQHandler(void)
 428:Src/sd_diskio_dma_rtos.c **** {
 687              		.loc 1 428 0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691 0000 08B5     		push	{r3, lr}
 692              	.LCFI23:
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 21


 693              		.cfi_def_cfa_offset 8
 694              		.cfi_offset 3, -8
 695              		.cfi_offset 14, -4
 429:Src/sd_diskio_dma_rtos.c ****   HAL_SD_IRQHandler(&uSdHandle);
 696              		.loc 1 429 0
 697 0002 0248     		ldr	r0, .L84
 698 0004 FFF7FEFF 		bl	HAL_SD_IRQHandler
 699              	.LVL58:
 700 0008 08BD     		pop	{r3, pc}
 701              	.L85:
 702 000a 00BF     		.align	2
 703              	.L84:
 704 000c 00000000 		.word	uSdHandle
 705              		.cfi_endproc
 706              	.LFE152:
 708              		.global	SD_Driver
 709              		.section	.rodata
 710              		.align	2
 711              		.set	.LANCHOR1,. + 0
 712              	.LC0:
 713 0000 0A000000 		.word	10
 714 0004 02000000 		.word	2
 715              		.section	.bss.SDQueueID,"aw",%nobits
 716              		.align	2
 717              		.set	.LANCHOR2,. + 0
 720              	SDQueueID:
 721 0000 00000000 		.space	4
 722              		.section	.data.Stat,"aw",%progbits
 723              		.set	.LANCHOR0,. + 0
 726              	Stat:
 727 0000 01       		.byte	1
 728              		.section	.rodata.SD_Driver,"a",%progbits
 729              		.align	2
 732              	SD_Driver:
 733 0000 00000000 		.word	SD_initialize
 734 0004 00000000 		.word	SD_status
 735 0008 00000000 		.word	SD_read
 736 000c 00000000 		.word	SD_write
 737 0010 00000000 		.word	SD_ioctl
 738              		.text
 739              	.Letext0:
 740              		.file 2 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 741              		.file 3 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 742              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 743              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 744              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 745              		.file 7 "Middlewares/Third_Party/FatFs/src/integer.h"
 746              		.file 8 "Middlewares/Third_Party/FatFs/src/diskio.h"
 747              		.file 9 "Inc/FreeRTOSConfig.h"
 748              		.file 10 "Drivers/CMSIS/Include/core_cm7.h"
 749              		.file 11 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 750              		.file 12 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 751              		.file 13 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\lock.h"
 752              		.file 14 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\_types.h"
 753              		.file 15 "c:\\gcc_toolchain\\6_2017-q1-update\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 754              		.file 16 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\reent.h"
 755              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 22


 756              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 757              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 758              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 759              		.file 21 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\stdlib.h"
 760              		.file 22 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 761              		.file 23 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
 762              		.file 24 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc.h"
 763              		.file 25 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 764              		.file 26 "Inc/stm32f7_diskio_dma_rtos.h"
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 23


DEFINED SYMBOLS
                            *ABS*:00000000 sd_diskio_dma_rtos.c
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:18     .text.SD_CheckStatus:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:24     .text.SD_CheckStatus:00000000 SD_CheckStatus
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:59     .text.SD_CheckStatus:00000020 $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:64     .text.SD_initialize:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:71     .text.SD_initialize:00000000 SD_initialize
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:145    .text.SD_initialize:00000050 $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:152    .text.SD_status:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:159    .text.SD_status:00000000 SD_status
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:180    .text.SD_read:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:187    .text.SD_read:00000000 SD_read
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:282    .text.SD_read:00000060 $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:287    .text.SD_write:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:294    .text.SD_write:00000000 SD_write
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:389    .text.SD_write:00000060 $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:394    .text.SD_ioctl:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:401    .text.SD_ioctl:00000000 SD_ioctl
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:433    .text.SD_ioctl:0000001c $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:437    .text.SD_ioctl:00000020 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:507    .text.SD_ioctl:00000058 $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:512    .text.BSP_SD_WriteCpltCallback:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:519    .text.BSP_SD_WriteCpltCallback:00000000 BSP_SD_WriteCpltCallback
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:541    .text.BSP_SD_WriteCpltCallback:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:546    .text.BSP_SD_ReadCpltCallback:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:553    .text.BSP_SD_ReadCpltCallback:00000000 BSP_SD_ReadCpltCallback
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:575    .text.BSP_SD_ReadCpltCallback:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:580    .text.BSP_SD_AbortCallback:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:587    .text.BSP_SD_AbortCallback:00000000 BSP_SD_AbortCallback
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:609    .text.BSP_SD_AbortCallback:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:614    .text.DMA2_Stream3_IRQHandler:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:621    .text.DMA2_Stream3_IRQHandler:00000000 DMA2_Stream3_IRQHandler
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:641    .text.DMA2_Stream3_IRQHandler:0000000c $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:646    .text.DMA2_Stream6_IRQHandler:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:653    .text.DMA2_Stream6_IRQHandler:00000000 DMA2_Stream6_IRQHandler
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:673    .text.DMA2_Stream6_IRQHandler:0000000c $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:678    .text.SDMMC1_IRQHandler:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:685    .text.SDMMC1_IRQHandler:00000000 SDMMC1_IRQHandler
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:704    .text.SDMMC1_IRQHandler:0000000c $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:732    .rodata.SD_Driver:00000000 SD_Driver
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:710    .rodata:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:716    .bss.SDQueueID:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:720    .bss.SDQueueID:00000000 SDQueueID
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:726    .data.Stat:00000000 Stat
C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s:729    .rodata.SD_Driver:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
BSP_SD_GetCardState
osKernelRunning
BSP_SD_Init
osMessageCreate
BSP_SD_ReadBlocks_DMA
osMessageGet
osKernelSysTick
vTaskDelay
BSP_SD_WriteBlocks_DMA
ARM GAS  C:\Users\Student\AppData\Local\Temp\ccCV9Fjq.s 			page 24


BSP_SD_GetCardInfo
osMessagePut
HAL_DMA_IRQHandler
uSdHandle
HAL_SD_IRQHandler
