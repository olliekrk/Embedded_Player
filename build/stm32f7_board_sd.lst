ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7_board_sd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.BSP_SD_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	BSP_SD_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-sp-d16
  25              	BSP_SD_DeInit:
  26              	.LFB138:
  27              		.file 1 "Src/stm32f7_board_sd.c"
   1:Src/stm32f7_board_sd.c **** /**
   2:Src/stm32f7_board_sd.c ****   ******************************************************************************
   3:Src/stm32f7_board_sd.c ****   * @file    stm32f769i_eval_sd.c
   4:Src/stm32f7_board_sd.c ****   * @author  MCD Application Team
   5:Src/stm32f7_board_sd.c ****   * @brief   This file includes the uSD card driver mounted on STM32F769I-EVAL
   6:Src/stm32f7_board_sd.c ****   *          evaluation boards.
   7:Src/stm32f7_board_sd.c ****   @verbatim
   8:Src/stm32f7_board_sd.c ****   How To use this driver:
   9:Src/stm32f7_board_sd.c ****   -----------------------
  10:Src/stm32f7_board_sd.c ****    - This driver is used to drive the micro SD external cards mounted on STM32F769I-EVAL
  11:Src/stm32f7_board_sd.c ****      evaluation board.
  12:Src/stm32f7_board_sd.c ****    - This driver does not need a specific component driver for the micro SD device
  13:Src/stm32f7_board_sd.c ****      to be included with.
  14:Src/stm32f7_board_sd.c **** 
  15:Src/stm32f7_board_sd.c ****   Driver description:
  16:Src/stm32f7_board_sd.c ****   ------------------
  17:Src/stm32f7_board_sd.c ****   + Initialization steps:
  18:Src/stm32f7_board_sd.c ****      o Initialize the micro SD card using the BSP_SD_InitEx() function. This
  19:Src/stm32f7_board_sd.c ****        function includes the MSP layer hardware resources initialization and the
  20:Src/stm32f7_board_sd.c ****        SDIO interface configuration to interface with the external micro SD. It
  21:Src/stm32f7_board_sd.c ****        also includes the micro SD initialization sequence for SDCard1 or SDCard2.
  22:Src/stm32f7_board_sd.c ****        When BSP_SD_Init() is called, SDCard1 is by default initialized.
  23:Src/stm32f7_board_sd.c ****      o To check the SD card presence you can use the function BSP_SD_IsDetectedEx() which
  24:Src/stm32f7_board_sd.c ****        returns the detection status for SDCard1 or SDCard2.
  25:Src/stm32f7_board_sd.c ****        the function BSP_SD_IsDetected() returns the detection status for SDCard1.
  26:Src/stm32f7_board_sd.c ****      o If SD presence detection interrupt mode is desired, you must configure the
  27:Src/stm32f7_board_sd.c ****        SD detection interrupt mode by calling the functions BSP_SD_ITConfig() for
  28:Src/stm32f7_board_sd.c ****        SDCard1 or BSP_SD_ITConfigEx() for SDCard2 . The interrupt is generated as
  29:Src/stm32f7_board_sd.c ****        an external interrupt whenever the micro SD card is plugged/unplugged
  30:Src/stm32f7_board_sd.c ****        in/from the evaluation board. The SD detection is managed by MFX, so the
  31:Src/stm32f7_board_sd.c ****        SD detection interrupt has to be treated by MFX_IRQOUT gpio pin IRQ handler.
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 2


  32:Src/stm32f7_board_sd.c ****      o The function BSP_SD_GetCardInfo()/BSP_SD_GetCardInfoEx() are used to get
  33:Src/stm32f7_board_sd.c ****        the micro SD card information which is stored in the structure
  34:Src/stm32f7_board_sd.c ****        "HAL_SD_CardInfoTypedef".
  35:Src/stm32f7_board_sd.c **** 
  36:Src/stm32f7_board_sd.c ****   + Micro SD card operations
  37:Src/stm32f7_board_sd.c ****      o The micro SD card can be accessed with read/write block(s) operations once
  38:Src/stm32f7_board_sd.c ****        it is ready for access. The access, by default to SDCard1, can be performed whether
  39:Src/stm32f7_board_sd.c ****        using the polling mode by calling the functions BSP_SD_ReadBlocks()/BSP_SD_WriteBlocks(),
  40:Src/stm32f7_board_sd.c ****        or by DMA transfer using the functions BSP_SD_ReadBlocks_DMA()/BSP_SD_WriteBlocks_DMA().
  41:Src/stm32f7_board_sd.c ****        The access can be performed to SDCard1 or SDCard2 by calling BSP_SD_ReadBlocksEx(),
  42:Src/stm32f7_board_sd.c ****        BSP_SD_WriteBlocksEx() or by calling BSP_SD_ReadBlocks_DMAEx()/BSP_SD_WriteBlocks_DMAEx().
  43:Src/stm32f7_board_sd.c ****      o The DMA transfer complete is used with interrupt mode. Once the SD transfer
  44:Src/stm32f7_board_sd.c ****        is complete, the SD interrupt is handled using the function BSP_SDMMC1_IRQHandler()
  45:Src/stm32f7_board_sd.c ****        when SDCard1 is used or BSP_SDMMC2_IRQHandler() when SDCard2 is used.
  46:Src/stm32f7_board_sd.c ****        The DMA Tx/Rx transfer complete are handled using the functions
  47:Src/stm32f7_board_sd.c ****        BSP_SDMMC1_DMA_Tx_IRQHandler(), BSP_SDMMC1_DMA_Rx_IRQHandler(),
  48:Src/stm32f7_board_sd.c ****        BSP_SDMMC2_DMA_Tx_IRQHandler(), BSP_SDMMC2_DMA_Rx_IRQHandler(). The corresponding
  49:Src/stm32f7_board_sd.c ****        user callbacks are implemented by the user at application level.
  50:Src/stm32f7_board_sd.c ****      o The SD erase block(s) is performed using the functions BSP_SD_Erase()/BSP_SD_EraseEx()
  51:Src/stm32f7_board_sd.c ****        with specifying the number of blocks to erase.
  52:Src/stm32f7_board_sd.c ****      o The SD runtime status is returned when calling the function BSP_SD_GetCardState()
  53:Src/stm32f7_board_sd.c ****        BSP_SD_GetCardStateEx().
  54:Src/stm32f7_board_sd.c **** 
  55:Src/stm32f7_board_sd.c ****   @endverbatim
  56:Src/stm32f7_board_sd.c ****   ******************************************************************************
  57:Src/stm32f7_board_sd.c ****   * @attention
  58:Src/stm32f7_board_sd.c ****   *
  59:Src/stm32f7_board_sd.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  60:Src/stm32f7_board_sd.c ****   *
  61:Src/stm32f7_board_sd.c ****   * Redistribution and use in source and binary forms, with or without modification,
  62:Src/stm32f7_board_sd.c ****   * are permitted provided that the following conditions are met:
  63:Src/stm32f7_board_sd.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  64:Src/stm32f7_board_sd.c ****   *      this list of conditions and the following disclaimer.
  65:Src/stm32f7_board_sd.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  66:Src/stm32f7_board_sd.c ****   *      this list of conditions and the following disclaimer in the documentation
  67:Src/stm32f7_board_sd.c ****   *      and/or other materials provided with the distribution.
  68:Src/stm32f7_board_sd.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  69:Src/stm32f7_board_sd.c ****   *      may be used to endorse or promote products derived from this software
  70:Src/stm32f7_board_sd.c ****   *      without specific prior written permission.
  71:Src/stm32f7_board_sd.c ****   *
  72:Src/stm32f7_board_sd.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  73:Src/stm32f7_board_sd.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  74:Src/stm32f7_board_sd.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  75:Src/stm32f7_board_sd.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  76:Src/stm32f7_board_sd.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  77:Src/stm32f7_board_sd.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  78:Src/stm32f7_board_sd.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  79:Src/stm32f7_board_sd.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  80:Src/stm32f7_board_sd.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  81:Src/stm32f7_board_sd.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  82:Src/stm32f7_board_sd.c ****   *
  83:Src/stm32f7_board_sd.c ****   ******************************************************************************
  84:Src/stm32f7_board_sd.c ****   */
  85:Src/stm32f7_board_sd.c **** 
  86:Src/stm32f7_board_sd.c **** /* Dependencies
  87:Src/stm32f7_board_sd.c **** - stm32f769i_eval.c
  88:Src/stm32f7_board_sd.c **** - stm32f7xx_hal_sd.c
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 3


  89:Src/stm32f7_board_sd.c **** - stm32f7xx_ll_sdmmc.c
  90:Src/stm32f7_board_sd.c **** - stm32f7xx_hal_dma.c
  91:Src/stm32f7_board_sd.c **** - stm32f7xx_hal_gpio.c
  92:Src/stm32f7_board_sd.c **** - stm32f7xx_hal_cortex.c
  93:Src/stm32f7_board_sd.c **** - stm32f7xx_hal_rcc_ex.h
  94:Src/stm32f7_board_sd.c **** EndDependencies */
  95:Src/stm32f7_board_sd.c **** 
  96:Src/stm32f7_board_sd.c **** /* Includes ------------------------------------------------------------------*/
  97:Src/stm32f7_board_sd.c **** #include "stm32f7xx.h"
  98:Src/stm32f7_board_sd.c **** #include "stm32f7_diskio_dma_rtos.h"
  99:Src/stm32f7_board_sd.c **** 
 100:Src/stm32f7_board_sd.c **** /** @addtogroup BSP
 101:Src/stm32f7_board_sd.c ****   * @{
 102:Src/stm32f7_board_sd.c ****   */
 103:Src/stm32f7_board_sd.c **** 
 104:Src/stm32f7_board_sd.c **** /** @addtogroup STM32F769I_EVAL
 105:Src/stm32f7_board_sd.c ****   * @{
 106:Src/stm32f7_board_sd.c ****   */
 107:Src/stm32f7_board_sd.c **** 
 108:Src/stm32f7_board_sd.c **** /** @defgroup STM32F769I_EVAL_SD STM32F769I_EVAL SD
 109:Src/stm32f7_board_sd.c ****   * @{
 110:Src/stm32f7_board_sd.c ****   */
 111:Src/stm32f7_board_sd.c **** 
 112:Src/stm32f7_board_sd.c **** 
 113:Src/stm32f7_board_sd.c **** /** @defgroup STM32F769I_EVAL_SD_Private_TypesDefinitions SD Private TypesDefinitions
 114:Src/stm32f7_board_sd.c ****   * @{
 115:Src/stm32f7_board_sd.c ****   */
 116:Src/stm32f7_board_sd.c **** /**
 117:Src/stm32f7_board_sd.c ****   * @}
 118:Src/stm32f7_board_sd.c ****   */
 119:Src/stm32f7_board_sd.c **** 
 120:Src/stm32f7_board_sd.c **** /** @defgroup STM32F769I_EVAL_SD_Private_Defines SD Private Defines
 121:Src/stm32f7_board_sd.c ****   * @{
 122:Src/stm32f7_board_sd.c ****   */
 123:Src/stm32f7_board_sd.c **** /**
 124:Src/stm32f7_board_sd.c ****   * @}
 125:Src/stm32f7_board_sd.c ****   */
 126:Src/stm32f7_board_sd.c **** 
 127:Src/stm32f7_board_sd.c **** /** @defgroup STM32F769I_EVAL_SD_Private_Macros SD Private Macros
 128:Src/stm32f7_board_sd.c ****   * @{
 129:Src/stm32f7_board_sd.c ****   */
 130:Src/stm32f7_board_sd.c **** /**
 131:Src/stm32f7_board_sd.c ****   * @}
 132:Src/stm32f7_board_sd.c ****   */
 133:Src/stm32f7_board_sd.c **** 
 134:Src/stm32f7_board_sd.c **** /** @defgroup STM32F769I_EVAL_SD_Private_Variables SD Private Variables
 135:Src/stm32f7_board_sd.c ****   * @{
 136:Src/stm32f7_board_sd.c ****   */
 137:Src/stm32f7_board_sd.c **** SD_HandleTypeDef uSdHandle;
 138:Src/stm32f7_board_sd.c **** //static uint8_t UseExtiModeDetection = 0;
 139:Src/stm32f7_board_sd.c **** 
 140:Src/stm32f7_board_sd.c **** /**
 141:Src/stm32f7_board_sd.c ****   * @}
 142:Src/stm32f7_board_sd.c ****   */
 143:Src/stm32f7_board_sd.c **** 
 144:Src/stm32f7_board_sd.c **** /** @defgroup STM32F769I_EVAL_SD_Private_Functions_Prototypes SD Private Functions Prototypes
 145:Src/stm32f7_board_sd.c ****   * @{
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 4


 146:Src/stm32f7_board_sd.c ****   */
 147:Src/stm32f7_board_sd.c **** /**
 148:Src/stm32f7_board_sd.c ****   * @}
 149:Src/stm32f7_board_sd.c ****   */
 150:Src/stm32f7_board_sd.c **** 
 151:Src/stm32f7_board_sd.c **** /** @defgroup STM32F769I_EVAL_SD_Private_Functions SD Private Functions
 152:Src/stm32f7_board_sd.c ****   * @{
 153:Src/stm32f7_board_sd.c ****   */
 154:Src/stm32f7_board_sd.c **** 
 155:Src/stm32f7_board_sd.c **** /**
 156:Src/stm32f7_board_sd.c ****   * @brief  Initializes the SD card device.
 157:Src/stm32f7_board_sd.c ****   * @retval SD status
 158:Src/stm32f7_board_sd.c ****   */
 159:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_Init(void)
 160:Src/stm32f7_board_sd.c **** {
 161:Src/stm32f7_board_sd.c ****   /* By default, initialize SDMMC1 */
 162:Src/stm32f7_board_sd.c ****   return BSP_SD_InitEx(SD_CARD1);
 163:Src/stm32f7_board_sd.c **** }
 164:Src/stm32f7_board_sd.c **** 
 165:Src/stm32f7_board_sd.c **** /**
 166:Src/stm32f7_board_sd.c ****   * @brief  Initializes the SD card device.
 167:Src/stm32f7_board_sd.c ****   * @param  SdCard: SD card to be used, that should be SD_CARD1 or SD_CARD2
 168:Src/stm32f7_board_sd.c ****   * @retval SD status
 169:Src/stm32f7_board_sd.c ****   */
 170:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_InitEx(uint32_t SdCard)
 171:Src/stm32f7_board_sd.c **** {
 172:Src/stm32f7_board_sd.c ****   uint8_t sd_state = MSD_OK;
 173:Src/stm32f7_board_sd.c **** 
 174:Src/stm32f7_board_sd.c ****     uSdHandle.Instance = SDMMC1;
 175:Src/stm32f7_board_sd.c ****     uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 176:Src/stm32f7_board_sd.c ****     uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 177:Src/stm32f7_board_sd.c ****     uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 178:Src/stm32f7_board_sd.c ****     uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 179:Src/stm32f7_board_sd.c ****     uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 180:Src/stm32f7_board_sd.c ****     uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 181:Src/stm32f7_board_sd.c **** 
 182:Src/stm32f7_board_sd.c **** /* Msp SD initialization */
 183:Src/stm32f7_board_sd.c ****   BSP_SD_MspInit(&uSdHandle, NULL);
 184:Src/stm32f7_board_sd.c **** 
 185:Src/stm32f7_board_sd.c ****   /* HAL SD initialization */
 186:Src/stm32f7_board_sd.c ****   if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 187:Src/stm32f7_board_sd.c ****   {
 188:Src/stm32f7_board_sd.c ****     sd_state = MSD_ERROR;
 189:Src/stm32f7_board_sd.c ****   }
 190:Src/stm32f7_board_sd.c **** 
 191:Src/stm32f7_board_sd.c ****   /* Configure SD Bus width */
 192:Src/stm32f7_board_sd.c ****   if(sd_state == MSD_OK)
 193:Src/stm32f7_board_sd.c ****   {
 194:Src/stm32f7_board_sd.c ****       /* Enable wide operation */
 195:Src/stm32f7_board_sd.c ****     sd_state = HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B);
 196:Src/stm32f7_board_sd.c **** 
 197:Src/stm32f7_board_sd.c ****     if(sd_state != HAL_OK)
 198:Src/stm32f7_board_sd.c ****     {
 199:Src/stm32f7_board_sd.c ****       sd_state = MSD_ERROR;
 200:Src/stm32f7_board_sd.c ****     }
 201:Src/stm32f7_board_sd.c ****     else
 202:Src/stm32f7_board_sd.c ****     {
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 5


 203:Src/stm32f7_board_sd.c ****       sd_state = MSD_OK;
 204:Src/stm32f7_board_sd.c ****     }
 205:Src/stm32f7_board_sd.c ****   }
 206:Src/stm32f7_board_sd.c **** 
 207:Src/stm32f7_board_sd.c ****   return  sd_state;
 208:Src/stm32f7_board_sd.c **** }
 209:Src/stm32f7_board_sd.c **** 
 210:Src/stm32f7_board_sd.c **** /**
 211:Src/stm32f7_board_sd.c ****   * @brief  DeInitializes the SD card device.
 212:Src/stm32f7_board_sd.c ****   * @retval SD status
 213:Src/stm32f7_board_sd.c ****   */
 214:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_DeInit(void)
 215:Src/stm32f7_board_sd.c **** {
  28              		.loc 1 215 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 216:Src/stm32f7_board_sd.c ****   /* By default, DeInitialize SDMMC1 */
 217:Src/stm32f7_board_sd.c ****   return BSP_SD_DeInitEx(SD_CARD1);
  37              		.loc 1 217 0
  38 0002 0020     		movs	r0, #0
  39 0004 FFF7FEFF 		bl	BSP_SD_DeInitEx
  40              	.LVL0:
 218:Src/stm32f7_board_sd.c **** }
  41              		.loc 1 218 0
  42 0008 08BD     		pop	{r3, pc}
  43              		.cfi_endproc
  44              	.LFE138:
  46              		.section	.text.BSP_SD_ReadBlocksEx,"ax",%progbits
  47              		.align	1
  48              		.global	BSP_SD_ReadBlocksEx
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  52              		.fpu fpv5-sp-d16
  54              	BSP_SD_ReadBlocksEx:
  55              	.LFB140:
 219:Src/stm32f7_board_sd.c **** 
 220:Src/stm32f7_board_sd.c **** 
 221:Src/stm32f7_board_sd.c **** 
 222:Src/stm32f7_board_sd.c **** /**
 223:Src/stm32f7_board_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in polling mode.
 224:Src/stm32f7_board_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 225:Src/stm32f7_board_sd.c ****   * @param  ReadAddr: Address from where data is to be read
 226:Src/stm32f7_board_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read
 227:Src/stm32f7_board_sd.c ****   * @param  Timeout: Timeout for read operation
 228:Src/stm32f7_board_sd.c ****   * @retval SD status
 229:Src/stm32f7_board_sd.c ****   */
 230:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeou
 231:Src/stm32f7_board_sd.c **** {
 232:Src/stm32f7_board_sd.c ****   return BSP_SD_ReadBlocksEx(SD_CARD1, pData, ReadAddr, NumOfBlocks, Timeout);
 233:Src/stm32f7_board_sd.c **** }
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 6


 234:Src/stm32f7_board_sd.c **** 
 235:Src/stm32f7_board_sd.c **** /**
 236:Src/stm32f7_board_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in polling mode.
 237:Src/stm32f7_board_sd.c ****   * @param  SdCard: SD card to be used, that should be SD_CARD1 or SD_CARD2
 238:Src/stm32f7_board_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 239:Src/stm32f7_board_sd.c ****   * @param  ReadAddr: Address from where data is to be read
 240:Src/stm32f7_board_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read
 241:Src/stm32f7_board_sd.c ****   * @param  Timeout: Timeout for read operation
 242:Src/stm32f7_board_sd.c ****   * @retval SD status
 243:Src/stm32f7_board_sd.c ****   */
 244:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_ReadBlocksEx(uint32_t SdCard, uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBloc
 245:Src/stm32f7_board_sd.c **** {
  56              		.loc 1 245 0
  57              		.cfi_startproc
  58              		@ args = 4, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              	.LVL1:
  61 0000 00B5     		push	{lr}
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 4
  64              		.cfi_offset 14, -4
  65 0002 83B0     		sub	sp, sp, #12
  66              	.LCFI2:
  67              		.cfi_def_cfa_offset 16
  68              	.LVL2:
 246:Src/stm32f7_board_sd.c ****   HAL_StatusTypeDef  sd_state = HAL_OK;
 247:Src/stm32f7_board_sd.c **** 
 248:Src/stm32f7_board_sd.c ****   sd_state = HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
  69              		.loc 1 248 0
  70 0004 0498     		ldr	r0, [sp, #16]
  71              	.LVL3:
  72 0006 0090     		str	r0, [sp]
  73 0008 0348     		ldr	r0, .L7
  74 000a FFF7FEFF 		bl	HAL_SD_ReadBlocks
  75              	.LVL4:
 249:Src/stm32f7_board_sd.c ****   if( sd_state == HAL_OK)
  76              		.loc 1 249 0
  77 000e 00B1     		cbz	r0, .L4
 250:Src/stm32f7_board_sd.c ****   {
 251:Src/stm32f7_board_sd.c ****     return MSD_OK;
 252:Src/stm32f7_board_sd.c ****   }
 253:Src/stm32f7_board_sd.c ****   else
 254:Src/stm32f7_board_sd.c ****   {
 255:Src/stm32f7_board_sd.c ****     return MSD_ERROR;
  78              		.loc 1 255 0
  79 0010 0120     		movs	r0, #1
  80              	.LVL5:
  81              	.L4:
 256:Src/stm32f7_board_sd.c ****   }
 257:Src/stm32f7_board_sd.c **** }
  82              		.loc 1 257 0
  83 0012 03B0     		add	sp, sp, #12
  84              	.LCFI3:
  85              		.cfi_def_cfa_offset 4
  86              		@ sp needed
  87 0014 5DF804FB 		ldr	pc, [sp], #4
  88              	.LVL6:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 7


  89              	.L8:
  90              		.align	2
  91              	.L7:
  92 0018 00000000 		.word	uSdHandle
  93              		.cfi_endproc
  94              	.LFE140:
  96              		.section	.text.BSP_SD_ReadBlocks,"ax",%progbits
  97              		.align	1
  98              		.global	BSP_SD_ReadBlocks
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv5-sp-d16
 104              	BSP_SD_ReadBlocks:
 105              	.LFB139:
 231:Src/stm32f7_board_sd.c ****   return BSP_SD_ReadBlocksEx(SD_CARD1, pData, ReadAddr, NumOfBlocks, Timeout);
 106              		.loc 1 231 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              	.LVL7:
 111 0000 00B5     		push	{lr}
 112              	.LCFI4:
 113              		.cfi_def_cfa_offset 4
 114              		.cfi_offset 14, -4
 115 0002 83B0     		sub	sp, sp, #12
 116              	.LCFI5:
 117              		.cfi_def_cfa_offset 16
 232:Src/stm32f7_board_sd.c **** }
 118              		.loc 1 232 0
 119 0004 0093     		str	r3, [sp]
 120 0006 1346     		mov	r3, r2
 121              	.LVL8:
 122 0008 0A46     		mov	r2, r1
 123              	.LVL9:
 124 000a 0146     		mov	r1, r0
 125              	.LVL10:
 126 000c 0020     		movs	r0, #0
 127              	.LVL11:
 128 000e FFF7FEFF 		bl	BSP_SD_ReadBlocksEx
 129              	.LVL12:
 233:Src/stm32f7_board_sd.c **** 
 130              		.loc 1 233 0
 131 0012 03B0     		add	sp, sp, #12
 132              	.LCFI6:
 133              		.cfi_def_cfa_offset 4
 134              		@ sp needed
 135 0014 5DF804FB 		ldr	pc, [sp], #4
 136              		.cfi_endproc
 137              	.LFE139:
 139              		.section	.text.BSP_SD_WriteBlocksEx,"ax",%progbits
 140              		.align	1
 141              		.global	BSP_SD_WriteBlocksEx
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu fpv5-sp-d16
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 8


 147              	BSP_SD_WriteBlocksEx:
 148              	.LFB142:
 258:Src/stm32f7_board_sd.c **** 
 259:Src/stm32f7_board_sd.c **** /**
 260:Src/stm32f7_board_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in polling mode.
 261:Src/stm32f7_board_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 262:Src/stm32f7_board_sd.c ****   * @param  WriteAddr: Address from where data is to be written
 263:Src/stm32f7_board_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write
 264:Src/stm32f7_board_sd.c ****   * @param  Timeout: Timeout for write operation
 265:Src/stm32f7_board_sd.c ****   * @retval SD status
 266:Src/stm32f7_board_sd.c ****   */
 267:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Time
 268:Src/stm32f7_board_sd.c **** {
 269:Src/stm32f7_board_sd.c ****     return BSP_SD_WriteBlocksEx(SD_CARD1, pData, WriteAddr, NumOfBlocks, Timeout);
 270:Src/stm32f7_board_sd.c **** }
 271:Src/stm32f7_board_sd.c **** 
 272:Src/stm32f7_board_sd.c **** /**
 273:Src/stm32f7_board_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in polling mode.
 274:Src/stm32f7_board_sd.c ****   * @param  SdCard: SD card to be used, that should be SD_CARD1 or SD_CARD2
 275:Src/stm32f7_board_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 276:Src/stm32f7_board_sd.c ****   * @param  WriteAddr: Address from where data is to be written
 277:Src/stm32f7_board_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write
 278:Src/stm32f7_board_sd.c ****   * @param  Timeout: Timeout for write operation
 279:Src/stm32f7_board_sd.c ****   * @retval SD status
 280:Src/stm32f7_board_sd.c ****   */
 281:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_WriteBlocksEx(uint32_t SdCard, uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBl
 282:Src/stm32f7_board_sd.c **** {
 149              		.loc 1 282 0
 150              		.cfi_startproc
 151              		@ args = 4, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              	.LVL13:
 154 0000 00B5     		push	{lr}
 155              	.LCFI7:
 156              		.cfi_def_cfa_offset 4
 157              		.cfi_offset 14, -4
 158 0002 83B0     		sub	sp, sp, #12
 159              	.LCFI8:
 160              		.cfi_def_cfa_offset 16
 161              	.LVL14:
 283:Src/stm32f7_board_sd.c ****   HAL_StatusTypeDef  sd_state = HAL_OK;
 284:Src/stm32f7_board_sd.c **** 
 285:Src/stm32f7_board_sd.c ****   sd_state = HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 162              		.loc 1 285 0
 163 0004 0498     		ldr	r0, [sp, #16]
 164              	.LVL15:
 165 0006 0090     		str	r0, [sp]
 166 0008 0348     		ldr	r0, .L15
 167 000a FFF7FEFF 		bl	HAL_SD_WriteBlocks
 168              	.LVL16:
 286:Src/stm32f7_board_sd.c ****   if( sd_state == HAL_OK)
 169              		.loc 1 286 0
 170 000e 00B1     		cbz	r0, .L12
 287:Src/stm32f7_board_sd.c ****   {
 288:Src/stm32f7_board_sd.c ****     return MSD_OK;
 289:Src/stm32f7_board_sd.c ****   }
 290:Src/stm32f7_board_sd.c ****   else
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 9


 291:Src/stm32f7_board_sd.c ****   {
 292:Src/stm32f7_board_sd.c ****     return MSD_ERROR;
 171              		.loc 1 292 0
 172 0010 0120     		movs	r0, #1
 173              	.LVL17:
 174              	.L12:
 293:Src/stm32f7_board_sd.c ****   }
 294:Src/stm32f7_board_sd.c **** }
 175              		.loc 1 294 0
 176 0012 03B0     		add	sp, sp, #12
 177              	.LCFI9:
 178              		.cfi_def_cfa_offset 4
 179              		@ sp needed
 180 0014 5DF804FB 		ldr	pc, [sp], #4
 181              	.LVL18:
 182              	.L16:
 183              		.align	2
 184              	.L15:
 185 0018 00000000 		.word	uSdHandle
 186              		.cfi_endproc
 187              	.LFE142:
 189              		.section	.text.BSP_SD_WriteBlocks,"ax",%progbits
 190              		.align	1
 191              		.global	BSP_SD_WriteBlocks
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu fpv5-sp-d16
 197              	BSP_SD_WriteBlocks:
 198              	.LFB141:
 268:Src/stm32f7_board_sd.c ****     return BSP_SD_WriteBlocksEx(SD_CARD1, pData, WriteAddr, NumOfBlocks, Timeout);
 199              		.loc 1 268 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL19:
 204 0000 00B5     		push	{lr}
 205              	.LCFI10:
 206              		.cfi_def_cfa_offset 4
 207              		.cfi_offset 14, -4
 208 0002 83B0     		sub	sp, sp, #12
 209              	.LCFI11:
 210              		.cfi_def_cfa_offset 16
 269:Src/stm32f7_board_sd.c **** }
 211              		.loc 1 269 0
 212 0004 0093     		str	r3, [sp]
 213 0006 1346     		mov	r3, r2
 214              	.LVL20:
 215 0008 0A46     		mov	r2, r1
 216              	.LVL21:
 217 000a 0146     		mov	r1, r0
 218              	.LVL22:
 219 000c 0020     		movs	r0, #0
 220              	.LVL23:
 221 000e FFF7FEFF 		bl	BSP_SD_WriteBlocksEx
 222              	.LVL24:
 270:Src/stm32f7_board_sd.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 10


 223              		.loc 1 270 0
 224 0012 03B0     		add	sp, sp, #12
 225              	.LCFI12:
 226              		.cfi_def_cfa_offset 4
 227              		@ sp needed
 228 0014 5DF804FB 		ldr	pc, [sp], #4
 229              		.cfi_endproc
 230              	.LFE141:
 232              		.section	.text.BSP_SD_ReadBlocks_DMAEx,"ax",%progbits
 233              		.align	1
 234              		.global	BSP_SD_ReadBlocks_DMAEx
 235              		.syntax unified
 236              		.thumb
 237              		.thumb_func
 238              		.fpu fpv5-sp-d16
 240              	BSP_SD_ReadBlocks_DMAEx:
 241              	.LFB144:
 295:Src/stm32f7_board_sd.c **** 
 296:Src/stm32f7_board_sd.c **** /**
 297:Src/stm32f7_board_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in DMA mode.
 298:Src/stm32f7_board_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 299:Src/stm32f7_board_sd.c ****   * @param  ReadAddr: Address from where data is to be read
 300:Src/stm32f7_board_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read
 301:Src/stm32f7_board_sd.c ****   * @retval SD status
 302:Src/stm32f7_board_sd.c ****   */
 303:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
 304:Src/stm32f7_board_sd.c **** {
 305:Src/stm32f7_board_sd.c ****   return BSP_SD_ReadBlocks_DMAEx(SD_CARD1, pData, ReadAddr, NumOfBlocks);
 306:Src/stm32f7_board_sd.c **** }
 307:Src/stm32f7_board_sd.c **** 
 308:Src/stm32f7_board_sd.c **** /**
 309:Src/stm32f7_board_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in DMA mode.
 310:Src/stm32f7_board_sd.c ****   * @param  SdCard: SD card to be used, that should be SD_CARD1 or SD_CARD2
 311:Src/stm32f7_board_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 312:Src/stm32f7_board_sd.c ****   * @param  ReadAddr: Address from where data is to be read
 313:Src/stm32f7_board_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read
 314:Src/stm32f7_board_sd.c ****   * @retval SD status
 315:Src/stm32f7_board_sd.c ****   */
 316:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_ReadBlocks_DMAEx(uint32_t SdCard, uint32_t *pData, uint32_t ReadAddr, uint32_t NumOf
 317:Src/stm32f7_board_sd.c **** {
 242              		.loc 1 317 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              	.LVL25:
 247 0000 08B5     		push	{r3, lr}
 248              	.LCFI13:
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 3, -8
 251              		.cfi_offset 14, -4
 252              	.LVL26:
 318:Src/stm32f7_board_sd.c ****   HAL_StatusTypeDef  sd_state = HAL_OK;
 319:Src/stm32f7_board_sd.c **** 
 320:Src/stm32f7_board_sd.c ****   sd_state = HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 253              		.loc 1 320 0
 254 0002 0348     		ldr	r0, .L23
 255              	.LVL27:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 11


 256 0004 FFF7FEFF 		bl	HAL_SD_ReadBlocks_DMA
 257              	.LVL28:
 321:Src/stm32f7_board_sd.c ****   if( sd_state == HAL_OK)
 258              		.loc 1 321 0
 259 0008 00B1     		cbz	r0, .L20
 322:Src/stm32f7_board_sd.c ****   {
 323:Src/stm32f7_board_sd.c ****     return MSD_OK;
 324:Src/stm32f7_board_sd.c ****   }
 325:Src/stm32f7_board_sd.c ****   else
 326:Src/stm32f7_board_sd.c ****   {
 327:Src/stm32f7_board_sd.c ****     return MSD_ERROR;
 260              		.loc 1 327 0
 261 000a 0120     		movs	r0, #1
 262              	.LVL29:
 263              	.L20:
 328:Src/stm32f7_board_sd.c ****   }
 329:Src/stm32f7_board_sd.c **** }
 264              		.loc 1 329 0
 265 000c 08BD     		pop	{r3, pc}
 266              	.L24:
 267 000e 00BF     		.align	2
 268              	.L23:
 269 0010 00000000 		.word	uSdHandle
 270              		.cfi_endproc
 271              	.LFE144:
 273              		.section	.text.BSP_SD_ReadBlocks_DMA,"ax",%progbits
 274              		.align	1
 275              		.global	BSP_SD_ReadBlocks_DMA
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 279              		.fpu fpv5-sp-d16
 281              	BSP_SD_ReadBlocks_DMA:
 282              	.LFB143:
 304:Src/stm32f7_board_sd.c ****   return BSP_SD_ReadBlocks_DMAEx(SD_CARD1, pData, ReadAddr, NumOfBlocks);
 283              		.loc 1 304 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              	.LVL30:
 288 0000 08B5     		push	{r3, lr}
 289              	.LCFI14:
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 3, -8
 292              		.cfi_offset 14, -4
 305:Src/stm32f7_board_sd.c **** }
 293              		.loc 1 305 0
 294 0002 1346     		mov	r3, r2
 295 0004 0A46     		mov	r2, r1
 296              	.LVL31:
 297 0006 0146     		mov	r1, r0
 298              	.LVL32:
 299 0008 0020     		movs	r0, #0
 300              	.LVL33:
 301 000a FFF7FEFF 		bl	BSP_SD_ReadBlocks_DMAEx
 302              	.LVL34:
 306:Src/stm32f7_board_sd.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 12


 303              		.loc 1 306 0
 304 000e 08BD     		pop	{r3, pc}
 305              		.cfi_endproc
 306              	.LFE143:
 308              		.section	.text.BSP_SD_WriteBlocks_DMAEx,"ax",%progbits
 309              		.align	1
 310              		.global	BSP_SD_WriteBlocks_DMAEx
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu fpv5-sp-d16
 316              	BSP_SD_WriteBlocks_DMAEx:
 317              	.LFB146:
 330:Src/stm32f7_board_sd.c **** 
 331:Src/stm32f7_board_sd.c **** /**
 332:Src/stm32f7_board_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in DMA mode.
 333:Src/stm32f7_board_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 334:Src/stm32f7_board_sd.c ****   * @param  WriteAddr: Address from where data is to be written
 335:Src/stm32f7_board_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write
 336:Src/stm32f7_board_sd.c ****   * @retval SD status
 337:Src/stm32f7_board_sd.c ****   */
 338:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
 339:Src/stm32f7_board_sd.c **** {
 340:Src/stm32f7_board_sd.c ****   return BSP_SD_WriteBlocks_DMAEx(SD_CARD1, pData, WriteAddr, NumOfBlocks);
 341:Src/stm32f7_board_sd.c **** }
 342:Src/stm32f7_board_sd.c **** 
 343:Src/stm32f7_board_sd.c **** /**
 344:Src/stm32f7_board_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in DMA mode.
 345:Src/stm32f7_board_sd.c ****   * @param  SdCard: SD card to be used, that should be SD_CARD1 or SD_CARD2
 346:Src/stm32f7_board_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 347:Src/stm32f7_board_sd.c ****   * @param  WriteAddr: Address from where data is to be written
 348:Src/stm32f7_board_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write
 349:Src/stm32f7_board_sd.c ****   * @retval SD status
 350:Src/stm32f7_board_sd.c ****   */
 351:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_WriteBlocks_DMAEx(uint32_t SdCard, uint32_t *pData, uint32_t WriteAddr, uint32_t Num
 352:Src/stm32f7_board_sd.c **** {
 318              		.loc 1 352 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              	.LVL35:
 323 0000 08B5     		push	{r3, lr}
 324              	.LCFI15:
 325              		.cfi_def_cfa_offset 8
 326              		.cfi_offset 3, -8
 327              		.cfi_offset 14, -4
 328              	.LVL36:
 353:Src/stm32f7_board_sd.c ****   HAL_StatusTypeDef  sd_state = HAL_OK;
 354:Src/stm32f7_board_sd.c **** 
 355:Src/stm32f7_board_sd.c ****     /* Write block(s) in DMA transfer mode */
 356:Src/stm32f7_board_sd.c ****   sd_state = HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 329              		.loc 1 356 0
 330 0002 0348     		ldr	r0, .L31
 331              	.LVL37:
 332 0004 FFF7FEFF 		bl	HAL_SD_WriteBlocks_DMA
 333              	.LVL38:
 357:Src/stm32f7_board_sd.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 13


 358:Src/stm32f7_board_sd.c ****   if( sd_state == HAL_OK)
 334              		.loc 1 358 0
 335 0008 00B1     		cbz	r0, .L28
 359:Src/stm32f7_board_sd.c ****   {
 360:Src/stm32f7_board_sd.c ****     return MSD_OK;
 361:Src/stm32f7_board_sd.c ****   }
 362:Src/stm32f7_board_sd.c ****   else
 363:Src/stm32f7_board_sd.c ****   {
 364:Src/stm32f7_board_sd.c ****     return MSD_ERROR;
 336              		.loc 1 364 0
 337 000a 0120     		movs	r0, #1
 338              	.LVL39:
 339              	.L28:
 365:Src/stm32f7_board_sd.c ****   }
 366:Src/stm32f7_board_sd.c **** }
 340              		.loc 1 366 0
 341 000c 08BD     		pop	{r3, pc}
 342              	.L32:
 343 000e 00BF     		.align	2
 344              	.L31:
 345 0010 00000000 		.word	uSdHandle
 346              		.cfi_endproc
 347              	.LFE146:
 349              		.section	.text.BSP_SD_WriteBlocks_DMA,"ax",%progbits
 350              		.align	1
 351              		.global	BSP_SD_WriteBlocks_DMA
 352              		.syntax unified
 353              		.thumb
 354              		.thumb_func
 355              		.fpu fpv5-sp-d16
 357              	BSP_SD_WriteBlocks_DMA:
 358              	.LFB145:
 339:Src/stm32f7_board_sd.c ****   return BSP_SD_WriteBlocks_DMAEx(SD_CARD1, pData, WriteAddr, NumOfBlocks);
 359              		.loc 1 339 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
 363              	.LVL40:
 364 0000 08B5     		push	{r3, lr}
 365              	.LCFI16:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 3, -8
 368              		.cfi_offset 14, -4
 340:Src/stm32f7_board_sd.c **** }
 369              		.loc 1 340 0
 370 0002 1346     		mov	r3, r2
 371 0004 0A46     		mov	r2, r1
 372              	.LVL41:
 373 0006 0146     		mov	r1, r0
 374              	.LVL42:
 375 0008 0020     		movs	r0, #0
 376              	.LVL43:
 377 000a FFF7FEFF 		bl	BSP_SD_WriteBlocks_DMAEx
 378              	.LVL44:
 341:Src/stm32f7_board_sd.c **** 
 379              		.loc 1 341 0
 380 000e 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 14


 381              		.cfi_endproc
 382              	.LFE145:
 384              		.section	.text.BSP_SD_EraseEx,"ax",%progbits
 385              		.align	1
 386              		.global	BSP_SD_EraseEx
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu fpv5-sp-d16
 392              	BSP_SD_EraseEx:
 393              	.LFB148:
 367:Src/stm32f7_board_sd.c **** 
 368:Src/stm32f7_board_sd.c **** /**
 369:Src/stm32f7_board_sd.c ****   * @brief  Erases the specified memory area of the given SD card.
 370:Src/stm32f7_board_sd.c ****   * @param  StartAddr: Start byte address
 371:Src/stm32f7_board_sd.c ****   * @param  EndAddr: End byte address
 372:Src/stm32f7_board_sd.c ****   * @retval SD status
 373:Src/stm32f7_board_sd.c ****   */
 374:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_Erase(uint32_t StartAddr, uint32_t EndAddr)
 375:Src/stm32f7_board_sd.c **** {
 376:Src/stm32f7_board_sd.c ****   return BSP_SD_EraseEx(SD_CARD1, StartAddr, EndAddr);
 377:Src/stm32f7_board_sd.c **** }
 378:Src/stm32f7_board_sd.c **** 
 379:Src/stm32f7_board_sd.c **** /**
 380:Src/stm32f7_board_sd.c ****   * @brief  Erases the specified memory area of the given SD card.
 381:Src/stm32f7_board_sd.c ****   * @param  SdCard: SD card to be used, that should be SD_CARD1 or SD_CARD2
 382:Src/stm32f7_board_sd.c ****   * @param  StartAddr: Start byte address
 383:Src/stm32f7_board_sd.c ****   * @param  EndAddr: End byte address
 384:Src/stm32f7_board_sd.c ****   * @retval SD status
 385:Src/stm32f7_board_sd.c ****   */
 386:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_EraseEx(uint32_t SdCard, uint32_t StartAddr, uint32_t EndAddr)
 387:Src/stm32f7_board_sd.c **** {
 394              		.loc 1 387 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              	.LVL45:
 399 0000 08B5     		push	{r3, lr}
 400              	.LCFI17:
 401              		.cfi_def_cfa_offset 8
 402              		.cfi_offset 3, -8
 403              		.cfi_offset 14, -4
 404              	.LVL46:
 388:Src/stm32f7_board_sd.c ****   HAL_StatusTypeDef  sd_state = HAL_OK;
 389:Src/stm32f7_board_sd.c **** 
 390:Src/stm32f7_board_sd.c ****   sd_state = HAL_SD_Erase(&uSdHandle, StartAddr, EndAddr);
 405              		.loc 1 390 0
 406 0002 0348     		ldr	r0, .L39
 407              	.LVL47:
 408 0004 FFF7FEFF 		bl	HAL_SD_Erase
 409              	.LVL48:
 391:Src/stm32f7_board_sd.c ****   if( sd_state == HAL_OK)
 410              		.loc 1 391 0
 411 0008 00B1     		cbz	r0, .L36
 392:Src/stm32f7_board_sd.c ****   {
 393:Src/stm32f7_board_sd.c ****     return MSD_OK;
 394:Src/stm32f7_board_sd.c ****   }
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 15


 395:Src/stm32f7_board_sd.c ****   else
 396:Src/stm32f7_board_sd.c ****   {
 397:Src/stm32f7_board_sd.c ****     return MSD_ERROR;
 412              		.loc 1 397 0
 413 000a 0120     		movs	r0, #1
 414              	.LVL49:
 415              	.L36:
 398:Src/stm32f7_board_sd.c ****   }
 399:Src/stm32f7_board_sd.c **** }
 416              		.loc 1 399 0
 417 000c 08BD     		pop	{r3, pc}
 418              	.L40:
 419 000e 00BF     		.align	2
 420              	.L39:
 421 0010 00000000 		.word	uSdHandle
 422              		.cfi_endproc
 423              	.LFE148:
 425              		.section	.text.BSP_SD_Erase,"ax",%progbits
 426              		.align	1
 427              		.global	BSP_SD_Erase
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv5-sp-d16
 433              	BSP_SD_Erase:
 434              	.LFB147:
 375:Src/stm32f7_board_sd.c ****   return BSP_SD_EraseEx(SD_CARD1, StartAddr, EndAddr);
 435              		.loc 1 375 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              	.LVL50:
 440 0000 08B5     		push	{r3, lr}
 441              	.LCFI18:
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 3, -8
 444              		.cfi_offset 14, -4
 376:Src/stm32f7_board_sd.c **** }
 445              		.loc 1 376 0
 446 0002 0A46     		mov	r2, r1
 447 0004 0146     		mov	r1, r0
 448              	.LVL51:
 449 0006 0020     		movs	r0, #0
 450              	.LVL52:
 451 0008 FFF7FEFF 		bl	BSP_SD_EraseEx
 452              	.LVL53:
 377:Src/stm32f7_board_sd.c **** 
 453              		.loc 1 377 0
 454 000c 08BD     		pop	{r3, pc}
 455              		.cfi_endproc
 456              	.LFE147:
 458              		.section	.text.BSP_SD_MspInit,"ax",%progbits
 459              		.align	1
 460              		.weak	BSP_SD_MspInit
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 16


 464              		.fpu fpv5-sp-d16
 466              	BSP_SD_MspInit:
 467              	.LFB149:
 400:Src/stm32f7_board_sd.c **** 
 401:Src/stm32f7_board_sd.c **** /**
 402:Src/stm32f7_board_sd.c ****   * @brief  Initializes the SD MSP.
 403:Src/stm32f7_board_sd.c ****   * @param  hsd: SD handle
 404:Src/stm32f7_board_sd.c ****   * @param  Params
 405:Src/stm32f7_board_sd.c ****   * @retval None
 406:Src/stm32f7_board_sd.c ****   */
 407:Src/stm32f7_board_sd.c **** __weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
 408:Src/stm32f7_board_sd.c **** {
 468              		.loc 1 408 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 40
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              	.LVL54:
 473 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 474              	.LCFI19:
 475              		.cfi_def_cfa_offset 36
 476              		.cfi_offset 4, -36
 477              		.cfi_offset 5, -32
 478              		.cfi_offset 6, -28
 479              		.cfi_offset 7, -24
 480              		.cfi_offset 8, -20
 481              		.cfi_offset 9, -16
 482              		.cfi_offset 10, -12
 483              		.cfi_offset 11, -8
 484              		.cfi_offset 14, -4
 485 0004 8BB0     		sub	sp, sp, #44
 486              	.LCFI20:
 487              		.cfi_def_cfa_offset 80
 488 0006 0646     		mov	r6, r0
 489              	.LBB2:
 409:Src/stm32f7_board_sd.c ****   static DMA_HandleTypeDef dma_rx_handle;
 410:Src/stm32f7_board_sd.c ****   static DMA_HandleTypeDef dma_tx_handle;
 411:Src/stm32f7_board_sd.c ****   GPIO_InitTypeDef gpio_init_structure;
 412:Src/stm32f7_board_sd.c **** 
 413:Src/stm32f7_board_sd.c **** 
 414:Src/stm32f7_board_sd.c ****     /* Enable SDIO clock */
 415:Src/stm32f7_board_sd.c ****     __HAL_RCC_SDMMC1_CLK_ENABLE();
 490              		.loc 1 415 0
 491 0008 544B     		ldr	r3, .L45
 492 000a 5A6C     		ldr	r2, [r3, #68]
 493 000c 42F40062 		orr	r2, r2, #2048
 494 0010 5A64     		str	r2, [r3, #68]
 495 0012 5A6C     		ldr	r2, [r3, #68]
 496 0014 02F40062 		and	r2, r2, #2048
 497 0018 0192     		str	r2, [sp, #4]
 498 001a 019A     		ldr	r2, [sp, #4]
 499              	.LBE2:
 500              	.LBB3:
 416:Src/stm32f7_board_sd.c **** 
 417:Src/stm32f7_board_sd.c ****     /* Enable DMA2 clocks */
 418:Src/stm32f7_board_sd.c ****     __DMAx_TxRx_CLK_ENABLE();
 501              		.loc 1 418 0
 502 001c 1A6B     		ldr	r2, [r3, #48]
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 17


 503 001e 42F48002 		orr	r2, r2, #4194304
 504 0022 1A63     		str	r2, [r3, #48]
 505 0024 1A6B     		ldr	r2, [r3, #48]
 506 0026 02F48002 		and	r2, r2, #4194304
 507 002a 0292     		str	r2, [sp, #8]
 508 002c 029A     		ldr	r2, [sp, #8]
 509              	.LBE3:
 510              	.LBB4:
 419:Src/stm32f7_board_sd.c **** 
 420:Src/stm32f7_board_sd.c ****     /* Enable GPIOs clock */
 421:Src/stm32f7_board_sd.c ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 511              		.loc 1 421 0
 512 002e 1A6B     		ldr	r2, [r3, #48]
 513 0030 42F00402 		orr	r2, r2, #4
 514 0034 1A63     		str	r2, [r3, #48]
 515 0036 1A6B     		ldr	r2, [r3, #48]
 516 0038 02F00402 		and	r2, r2, #4
 517 003c 0392     		str	r2, [sp, #12]
 518 003e 039A     		ldr	r2, [sp, #12]
 519              	.LBE4:
 520              	.LBB5:
 422:Src/stm32f7_board_sd.c ****     __HAL_RCC_GPIOD_CLK_ENABLE();
 521              		.loc 1 422 0
 522 0040 1A6B     		ldr	r2, [r3, #48]
 523 0042 42F00802 		orr	r2, r2, #8
 524 0046 1A63     		str	r2, [r3, #48]
 525 0048 1B6B     		ldr	r3, [r3, #48]
 526 004a 03F00803 		and	r3, r3, #8
 527 004e 0493     		str	r3, [sp, #16]
 528 0050 049B     		ldr	r3, [sp, #16]
 529              	.LBE5:
 423:Src/stm32f7_board_sd.c **** 
 424:Src/stm32f7_board_sd.c ****     /* Common GPIO configuration */
 425:Src/stm32f7_board_sd.c ****     gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 530              		.loc 1 425 0
 531 0052 0223     		movs	r3, #2
 532 0054 0693     		str	r3, [sp, #24]
 426:Src/stm32f7_board_sd.c ****     gpio_init_structure.Pull      = GPIO_PULLUP;
 533              		.loc 1 426 0
 534 0056 0123     		movs	r3, #1
 535 0058 0793     		str	r3, [sp, #28]
 427:Src/stm32f7_board_sd.c ****     gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 536              		.loc 1 427 0
 537 005a 0327     		movs	r7, #3
 538 005c 0897     		str	r7, [sp, #32]
 428:Src/stm32f7_board_sd.c ****     gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 539              		.loc 1 428 0
 540 005e 0C23     		movs	r3, #12
 541 0060 0993     		str	r3, [sp, #36]
 429:Src/stm32f7_board_sd.c **** 
 430:Src/stm32f7_board_sd.c ****     /* GPIOC configuration: SD1_D0, SD1_D1, SD1_D2, SD1_D3 and SD1_CLK pins */
 431:Src/stm32f7_board_sd.c ****     gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 542              		.loc 1 431 0
 543 0062 0AAC     		add	r4, sp, #40
 544 0064 4FF4F853 		mov	r3, #7936
 545 0068 44F8143D 		str	r3, [r4, #-20]!
 432:Src/stm32f7_board_sd.c **** 
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 18


 433:Src/stm32f7_board_sd.c ****     HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 546              		.loc 1 433 0
 547 006c 2146     		mov	r1, r4
 548              	.LVL55:
 549 006e 3C48     		ldr	r0, .L45+4
 550              	.LVL56:
 551 0070 FFF7FEFF 		bl	HAL_GPIO_Init
 552              	.LVL57:
 434:Src/stm32f7_board_sd.c **** 
 435:Src/stm32f7_board_sd.c ****     /* GPIOD configuration: SD1_CMD pin */
 436:Src/stm32f7_board_sd.c ****     gpio_init_structure.Pin = GPIO_PIN_2;
 553              		.loc 1 436 0
 554 0074 4FF00408 		mov	r8, #4
 555 0078 CDF81480 		str	r8, [sp, #20]
 437:Src/stm32f7_board_sd.c ****     HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 556              		.loc 1 437 0
 557 007c 2146     		mov	r1, r4
 558 007e 3948     		ldr	r0, .L45+8
 559 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 560              	.LVL58:
 438:Src/stm32f7_board_sd.c **** 
 439:Src/stm32f7_board_sd.c ****     /* NVIC configuration for SDIO interrupts */
 440:Src/stm32f7_board_sd.c ****     HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 561              		.loc 1 440 0
 562 0084 0022     		movs	r2, #0
 563 0086 0E21     		movs	r1, #14
 564 0088 3120     		movs	r0, #49
 565 008a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 566              	.LVL59:
 441:Src/stm32f7_board_sd.c ****     HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 567              		.loc 1 441 0
 568 008e 3120     		movs	r0, #49
 569 0090 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 570              	.LVL60:
 442:Src/stm32f7_board_sd.c **** 
 443:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.Channel             = SD1_DMAx_Rx_CHANNEL;
 571              		.loc 1 443 0
 572 0094 344C     		ldr	r4, .L45+12
 573 0096 4FF0006B 		mov	fp, #134217728
 574 009a C4F804B0 		str	fp, [r4, #4]
 444:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 575              		.loc 1 444 0
 576 009e 0025     		movs	r5, #0
 577 00a0 A560     		str	r5, [r4, #8]
 445:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 578              		.loc 1 445 0
 579 00a2 E560     		str	r5, [r4, #12]
 446:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 580              		.loc 1 446 0
 581 00a4 4FF4806A 		mov	r10, #1024
 582 00a8 C4F810A0 		str	r10, [r4, #16]
 447:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 583              		.loc 1 447 0
 584 00ac 4FF48059 		mov	r9, #4096
 585 00b0 C4F81490 		str	r9, [r4, #20]
 448:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 586              		.loc 1 448 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 19


 587 00b4 4FF48043 		mov	r3, #16384
 588 00b8 A361     		str	r3, [r4, #24]
 449:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 589              		.loc 1 449 0
 590 00ba 2023     		movs	r3, #32
 591 00bc E361     		str	r3, [r4, #28]
 450:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 592              		.loc 1 450 0
 593 00be 4FF44033 		mov	r3, #196608
 594 00c2 2362     		str	r3, [r4, #32]
 451:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 595              		.loc 1 451 0
 596 00c4 C4F82480 		str	r8, [r4, #36]
 452:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 597              		.loc 1 452 0
 598 00c8 A762     		str	r7, [r4, #40]
 453:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 599              		.loc 1 453 0
 600 00ca 4FF40003 		mov	r3, #8388608
 601 00ce E362     		str	r3, [r4, #44]
 454:Src/stm32f7_board_sd.c ****     dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 602              		.loc 1 454 0
 603 00d0 4FF40013 		mov	r3, #2097152
 604 00d4 2363     		str	r3, [r4, #48]
 455:Src/stm32f7_board_sd.c ****     dma_rx_handle.Instance                 = SD1_DMAx_Rx_STREAM;
 605              		.loc 1 455 0
 606 00d6 254B     		ldr	r3, .L45+16
 607 00d8 2360     		str	r3, [r4]
 456:Src/stm32f7_board_sd.c **** 
 457:Src/stm32f7_board_sd.c ****     /* Associate the DMA handle */
 458:Src/stm32f7_board_sd.c ****     __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 608              		.loc 1 458 0
 609 00da F463     		str	r4, [r6, #60]
 610 00dc A663     		str	r6, [r4, #56]
 459:Src/stm32f7_board_sd.c **** 
 460:Src/stm32f7_board_sd.c ****     /* Deinitialize the stream for new transfer */
 461:Src/stm32f7_board_sd.c ****     HAL_DMA_DeInit(&dma_rx_handle);
 611              		.loc 1 461 0
 612 00de 2046     		mov	r0, r4
 613 00e0 FFF7FEFF 		bl	HAL_DMA_DeInit
 614              	.LVL61:
 462:Src/stm32f7_board_sd.c **** 
 463:Src/stm32f7_board_sd.c ****     /* Configure the DMA stream */
 464:Src/stm32f7_board_sd.c ****     HAL_DMA_Init(&dma_rx_handle);
 615              		.loc 1 464 0
 616 00e4 2046     		mov	r0, r4
 617 00e6 FFF7FEFF 		bl	HAL_DMA_Init
 618              	.LVL62:
 465:Src/stm32f7_board_sd.c **** 
 466:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.Channel             = SD1_DMAx_Tx_CHANNEL;
 619              		.loc 1 466 0
 620 00ea 214C     		ldr	r4, .L45+20
 621 00ec C4F804B0 		str	fp, [r4, #4]
 467:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 622              		.loc 1 467 0
 623 00f0 4023     		movs	r3, #64
 624 00f2 A360     		str	r3, [r4, #8]
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 20


 468:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 625              		.loc 1 468 0
 626 00f4 E560     		str	r5, [r4, #12]
 469:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 627              		.loc 1 469 0
 628 00f6 C4F810A0 		str	r10, [r4, #16]
 470:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 629              		.loc 1 470 0
 630 00fa C4F81490 		str	r9, [r4, #20]
 471:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 631              		.loc 1 471 0
 632 00fe 4FF48043 		mov	r3, #16384
 633 0102 A361     		str	r3, [r4, #24]
 472:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 634              		.loc 1 472 0
 635 0104 2023     		movs	r3, #32
 636 0106 E361     		str	r3, [r4, #28]
 473:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 637              		.loc 1 473 0
 638 0108 4FF44033 		mov	r3, #196608
 639 010c 2362     		str	r3, [r4, #32]
 474:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 640              		.loc 1 474 0
 641 010e C4F82480 		str	r8, [r4, #36]
 475:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 642              		.loc 1 475 0
 643 0112 A762     		str	r7, [r4, #40]
 476:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 644              		.loc 1 476 0
 645 0114 4FF40003 		mov	r3, #8388608
 646 0118 E362     		str	r3, [r4, #44]
 477:Src/stm32f7_board_sd.c ****     dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 647              		.loc 1 477 0
 648 011a 4FF40013 		mov	r3, #2097152
 649 011e 2363     		str	r3, [r4, #48]
 478:Src/stm32f7_board_sd.c ****     dma_tx_handle.Instance                 = SD1_DMAx_Tx_STREAM;
 650              		.loc 1 478 0
 651 0120 144B     		ldr	r3, .L45+24
 652 0122 2360     		str	r3, [r4]
 479:Src/stm32f7_board_sd.c **** 
 480:Src/stm32f7_board_sd.c ****     /* Associate the DMA handle */
 481:Src/stm32f7_board_sd.c ****     __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 653              		.loc 1 481 0
 654 0124 3464     		str	r4, [r6, #64]
 655 0126 A663     		str	r6, [r4, #56]
 482:Src/stm32f7_board_sd.c **** 
 483:Src/stm32f7_board_sd.c ****     /* Deinitialize the stream for new transfer */
 484:Src/stm32f7_board_sd.c ****     HAL_DMA_DeInit(&dma_tx_handle);
 656              		.loc 1 484 0
 657 0128 2046     		mov	r0, r4
 658 012a FFF7FEFF 		bl	HAL_DMA_DeInit
 659              	.LVL63:
 485:Src/stm32f7_board_sd.c **** 
 486:Src/stm32f7_board_sd.c ****     /* Configure the DMA stream */
 487:Src/stm32f7_board_sd.c ****     HAL_DMA_Init(&dma_tx_handle);
 660              		.loc 1 487 0
 661 012e 2046     		mov	r0, r4
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 21


 662 0130 FFF7FEFF 		bl	HAL_DMA_Init
 663              	.LVL64:
 488:Src/stm32f7_board_sd.c **** 
 489:Src/stm32f7_board_sd.c ****     /* NVIC configuration for DMA transfer complete interrupt */
 490:Src/stm32f7_board_sd.c ****     HAL_NVIC_SetPriority(SD1_DMAx_Rx_IRQn, 0x0F, 0);
 664              		.loc 1 490 0
 665 0134 2A46     		mov	r2, r5
 666 0136 0F21     		movs	r1, #15
 667 0138 3B20     		movs	r0, #59
 668 013a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 669              	.LVL65:
 491:Src/stm32f7_board_sd.c ****     HAL_NVIC_EnableIRQ(SD1_DMAx_Rx_IRQn);
 670              		.loc 1 491 0
 671 013e 3B20     		movs	r0, #59
 672 0140 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 673              	.LVL66:
 492:Src/stm32f7_board_sd.c **** 
 493:Src/stm32f7_board_sd.c ****     /* NVIC configuration for DMA transfer complete interrupt */
 494:Src/stm32f7_board_sd.c ****     HAL_NVIC_SetPriority(SD1_DMAx_Tx_IRQn, 0x0F, 0);
 674              		.loc 1 494 0
 675 0144 2A46     		mov	r2, r5
 676 0146 0F21     		movs	r1, #15
 677 0148 4520     		movs	r0, #69
 678 014a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 679              	.LVL67:
 495:Src/stm32f7_board_sd.c ****     HAL_NVIC_EnableIRQ(SD1_DMAx_Tx_IRQn);
 680              		.loc 1 495 0
 681 014e 4520     		movs	r0, #69
 682 0150 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 683              	.LVL68:
 496:Src/stm32f7_board_sd.c **** }
 684              		.loc 1 496 0
 685 0154 0BB0     		add	sp, sp, #44
 686              	.LCFI21:
 687              		.cfi_def_cfa_offset 36
 688              		@ sp needed
 689 0156 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 690              	.LVL69:
 691              	.L46:
 692 015a 00BF     		.align	2
 693              	.L45:
 694 015c 00380240 		.word	1073887232
 695 0160 00080240 		.word	1073874944
 696 0164 000C0240 		.word	1073875968
 697 0168 00000000 		.word	.LANCHOR0
 698 016c 58640240 		.word	1073898584
 699 0170 00000000 		.word	.LANCHOR1
 700 0174 A0640240 		.word	1073898656
 701              		.cfi_endproc
 702              	.LFE149:
 704              		.section	.text.BSP_SD_InitEx,"ax",%progbits
 705              		.align	1
 706              		.global	BSP_SD_InitEx
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 710              		.fpu fpv5-sp-d16
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 22


 712              	BSP_SD_InitEx:
 713              	.LFB137:
 171:Src/stm32f7_board_sd.c ****   uint8_t sd_state = MSD_OK;
 714              		.loc 1 171 0
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 0
 717              		@ frame_needed = 0, uses_anonymous_args = 0
 718              	.LVL70:
 719 0000 10B5     		push	{r4, lr}
 720              	.LCFI22:
 721              		.cfi_def_cfa_offset 8
 722              		.cfi_offset 4, -8
 723              		.cfi_offset 14, -4
 724              	.LVL71:
 174:Src/stm32f7_board_sd.c ****     uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 725              		.loc 1 174 0
 726 0002 0F4C     		ldr	r4, .L55
 727 0004 0F4B     		ldr	r3, .L55+4
 728 0006 2360     		str	r3, [r4]
 175:Src/stm32f7_board_sd.c ****     uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 729              		.loc 1 175 0
 730 0008 0021     		movs	r1, #0
 731 000a 6160     		str	r1, [r4, #4]
 176:Src/stm32f7_board_sd.c ****     uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 732              		.loc 1 176 0
 733 000c A160     		str	r1, [r4, #8]
 177:Src/stm32f7_board_sd.c ****     uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 734              		.loc 1 177 0
 735 000e E160     		str	r1, [r4, #12]
 178:Src/stm32f7_board_sd.c ****     uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 736              		.loc 1 178 0
 737 0010 2161     		str	r1, [r4, #16]
 179:Src/stm32f7_board_sd.c ****     uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 738              		.loc 1 179 0
 739 0012 6161     		str	r1, [r4, #20]
 180:Src/stm32f7_board_sd.c **** 
 740              		.loc 1 180 0
 741 0014 A161     		str	r1, [r4, #24]
 183:Src/stm32f7_board_sd.c **** 
 742              		.loc 1 183 0
 743 0016 2046     		mov	r0, r4
 744              	.LVL72:
 745 0018 FFF7FEFF 		bl	BSP_SD_MspInit
 746              	.LVL73:
 186:Src/stm32f7_board_sd.c ****   {
 747              		.loc 1 186 0
 748 001c 2046     		mov	r0, r4
 749 001e FFF7FEFF 		bl	HAL_SD_Init
 750              	.LVL74:
 751 0022 00B1     		cbz	r0, .L48
 188:Src/stm32f7_board_sd.c ****   }
 752              		.loc 1 188 0
 753 0024 0120     		movs	r0, #1
 754              	.L48:
 755              	.LVL75:
 192:Src/stm32f7_board_sd.c ****   {
 756              		.loc 1 192 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 23


 757 0026 00B1     		cbz	r0, .L53
 758              	.LVL76:
 759              	.L49:
 208:Src/stm32f7_board_sd.c **** 
 760              		.loc 1 208 0
 761 0028 10BD     		pop	{r4, pc}
 762              	.L53:
 195:Src/stm32f7_board_sd.c **** 
 763              		.loc 1 195 0
 764 002a 4FF40061 		mov	r1, #2048
 765 002e 0448     		ldr	r0, .L55
 766              	.LVL77:
 767 0030 FFF7FEFF 		bl	HAL_SD_ConfigWideBusOperation
 768              	.LVL78:
 197:Src/stm32f7_board_sd.c ****     {
 769              		.loc 1 197 0
 770 0034 08B9     		cbnz	r0, .L54
 203:Src/stm32f7_board_sd.c ****     }
 771              		.loc 1 203 0
 772 0036 0020     		movs	r0, #0
 773              	.LVL79:
 774 0038 F6E7     		b	.L49
 775              	.LVL80:
 776              	.L54:
 199:Src/stm32f7_board_sd.c ****     }
 777              		.loc 1 199 0
 778 003a 0120     		movs	r0, #1
 779              	.LVL81:
 780 003c 10BD     		pop	{r4, pc}
 781              	.L56:
 782 003e 00BF     		.align	2
 783              	.L55:
 784 0040 00000000 		.word	uSdHandle
 785 0044 002C0140 		.word	1073818624
 786              		.cfi_endproc
 787              	.LFE137:
 789              		.section	.text.BSP_SD_Init,"ax",%progbits
 790              		.align	1
 791              		.global	BSP_SD_Init
 792              		.syntax unified
 793              		.thumb
 794              		.thumb_func
 795              		.fpu fpv5-sp-d16
 797              	BSP_SD_Init:
 798              	.LFB136:
 160:Src/stm32f7_board_sd.c ****   /* By default, initialize SDMMC1 */
 799              		.loc 1 160 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803 0000 08B5     		push	{r3, lr}
 804              	.LCFI23:
 805              		.cfi_def_cfa_offset 8
 806              		.cfi_offset 3, -8
 807              		.cfi_offset 14, -4
 162:Src/stm32f7_board_sd.c **** }
 808              		.loc 1 162 0
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 24


 809 0002 0020     		movs	r0, #0
 810 0004 FFF7FEFF 		bl	BSP_SD_InitEx
 811              	.LVL82:
 163:Src/stm32f7_board_sd.c **** 
 812              		.loc 1 163 0
 813 0008 08BD     		pop	{r3, pc}
 814              		.cfi_endproc
 815              	.LFE136:
 817              		.section	.text.BSP_SD_MspDeInit,"ax",%progbits
 818              		.align	1
 819              		.weak	BSP_SD_MspDeInit
 820              		.syntax unified
 821              		.thumb
 822              		.thumb_func
 823              		.fpu fpv5-sp-d16
 825              	BSP_SD_MspDeInit:
 826              	.LFB150:
 497:Src/stm32f7_board_sd.c **** 
 498:Src/stm32f7_board_sd.c **** /**
 499:Src/stm32f7_board_sd.c ****   * @brief  DeInitializes the SD MSP.
 500:Src/stm32f7_board_sd.c ****   * @param  hsd: SD handle
 501:Src/stm32f7_board_sd.c ****   * @param  Params
 502:Src/stm32f7_board_sd.c ****   * @retval None
 503:Src/stm32f7_board_sd.c ****   */
 504:Src/stm32f7_board_sd.c **** __weak void BSP_SD_MspDeInit(SD_HandleTypeDef *hsd, void *Params)
 505:Src/stm32f7_board_sd.c **** {
 827              		.loc 1 505 0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 0
 830              		@ frame_needed = 0, uses_anonymous_args = 0
 831              	.LVL83:
 832 0000 08B5     		push	{r3, lr}
 833              	.LCFI24:
 834              		.cfi_def_cfa_offset 8
 835              		.cfi_offset 3, -8
 836              		.cfi_offset 14, -4
 506:Src/stm32f7_board_sd.c ****   static DMA_HandleTypeDef dma_rx_handle;
 507:Src/stm32f7_board_sd.c ****   static DMA_HandleTypeDef dma_tx_handle;
 508:Src/stm32f7_board_sd.c **** 
 509:Src/stm32f7_board_sd.c ****     /* Disable NVIC for DMA transfer complete interrupts */
 510:Src/stm32f7_board_sd.c ****     HAL_NVIC_DisableIRQ(SD1_DMAx_Rx_IRQn);
 837              		.loc 1 510 0
 838 0002 3B20     		movs	r0, #59
 839              	.LVL84:
 840 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 841              	.LVL85:
 511:Src/stm32f7_board_sd.c ****     HAL_NVIC_DisableIRQ(SD1_DMAx_Tx_IRQn);
 842              		.loc 1 511 0
 843 0008 4520     		movs	r0, #69
 844 000a FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 845              	.LVL86:
 512:Src/stm32f7_board_sd.c **** 
 513:Src/stm32f7_board_sd.c ****     /* Deinitialize the stream for new transfer */
 514:Src/stm32f7_board_sd.c ****     dma_rx_handle.Instance = SD1_DMAx_Rx_STREAM;
 846              		.loc 1 514 0
 847 000e 0948     		ldr	r0, .L61
 848 0010 094B     		ldr	r3, .L61+4
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 25


 849 0012 0360     		str	r3, [r0]
 515:Src/stm32f7_board_sd.c ****     HAL_DMA_DeInit(&dma_rx_handle);
 850              		.loc 1 515 0
 851 0014 FFF7FEFF 		bl	HAL_DMA_DeInit
 852              	.LVL87:
 516:Src/stm32f7_board_sd.c **** 
 517:Src/stm32f7_board_sd.c ****     /* Deinitialize the stream for new transfer */
 518:Src/stm32f7_board_sd.c ****     dma_tx_handle.Instance = SD1_DMAx_Tx_STREAM;
 853              		.loc 1 518 0
 854 0018 0848     		ldr	r0, .L61+8
 855 001a 094B     		ldr	r3, .L61+12
 856 001c 0360     		str	r3, [r0]
 519:Src/stm32f7_board_sd.c ****     HAL_DMA_DeInit(&dma_tx_handle);
 857              		.loc 1 519 0
 858 001e FFF7FEFF 		bl	HAL_DMA_DeInit
 859              	.LVL88:
 520:Src/stm32f7_board_sd.c **** 
 521:Src/stm32f7_board_sd.c ****     /* Disable NVIC for SDIO interrupts */
 522:Src/stm32f7_board_sd.c ****     HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 860              		.loc 1 522 0
 861 0022 3120     		movs	r0, #49
 862 0024 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 863              	.LVL89:
 523:Src/stm32f7_board_sd.c **** 
 524:Src/stm32f7_board_sd.c ****     /* DeInit GPIO pins can be done in the application
 525:Src/stm32f7_board_sd.c ****     (by surcharging this __weak function) */
 526:Src/stm32f7_board_sd.c **** 
 527:Src/stm32f7_board_sd.c ****     /* Disable SDMMC1 clock */
 528:Src/stm32f7_board_sd.c ****     __HAL_RCC_SDMMC1_CLK_DISABLE();
 864              		.loc 1 528 0
 865 0028 064A     		ldr	r2, .L61+16
 866 002a 536C     		ldr	r3, [r2, #68]
 867 002c 23F40063 		bic	r3, r3, #2048
 868 0030 5364     		str	r3, [r2, #68]
 869 0032 08BD     		pop	{r3, pc}
 870              	.L62:
 871              		.align	2
 872              	.L61:
 873 0034 00000000 		.word	.LANCHOR2
 874 0038 58640240 		.word	1073898584
 875 003c 00000000 		.word	.LANCHOR3
 876 0040 A0640240 		.word	1073898656
 877 0044 00380240 		.word	1073887232
 878              		.cfi_endproc
 879              	.LFE150:
 881              		.section	.text.BSP_SD_GetCardStateEx,"ax",%progbits
 882              		.align	1
 883              		.global	BSP_SD_GetCardStateEx
 884              		.syntax unified
 885              		.thumb
 886              		.thumb_func
 887              		.fpu fpv5-sp-d16
 889              	BSP_SD_GetCardStateEx:
 890              	.LFB152:
 529:Src/stm32f7_board_sd.c **** }
 530:Src/stm32f7_board_sd.c **** 
 531:Src/stm32f7_board_sd.c **** /**
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 26


 532:Src/stm32f7_board_sd.c ****   * @brief  Gets the current SD card data status.
 533:Src/stm32f7_board_sd.c ****   * @retval Data transfer state.
 534:Src/stm32f7_board_sd.c ****   *          This value can be one of the following values:
 535:Src/stm32f7_board_sd.c ****   *            @arg  SD_TRANSFER_OK: No data transfer is acting
 536:Src/stm32f7_board_sd.c ****   *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
 537:Src/stm32f7_board_sd.c ****   */
 538:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_GetCardState(void)
 539:Src/stm32f7_board_sd.c **** {
 540:Src/stm32f7_board_sd.c ****   return BSP_SD_GetCardStateEx(SD_CARD1);
 541:Src/stm32f7_board_sd.c **** }
 542:Src/stm32f7_board_sd.c **** 
 543:Src/stm32f7_board_sd.c **** /**
 544:Src/stm32f7_board_sd.c ****   * @brief  Gets the current SD card data status.
 545:Src/stm32f7_board_sd.c ****   * @param  SdCard: SD_CARD1 or SD_CARD2
 546:Src/stm32f7_board_sd.c ****   * @retval Data transfer state.
 547:Src/stm32f7_board_sd.c ****   *          This value can be one of the following values:
 548:Src/stm32f7_board_sd.c ****   *            @arg  SD_TRANSFER_OK: No data transfer is acting
 549:Src/stm32f7_board_sd.c ****   *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
 550:Src/stm32f7_board_sd.c ****   */
 551:Src/stm32f7_board_sd.c **** uint8_t BSP_SD_GetCardStateEx(uint32_t SdCard)
 552:Src/stm32f7_board_sd.c **** {
 891              		.loc 1 552 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895              	.LVL90:
 896 0000 08B5     		push	{r3, lr}
 897              	.LCFI25:
 898              		.cfi_def_cfa_offset 8
 899              		.cfi_offset 3, -8
 900              		.cfi_offset 14, -4
 553:Src/stm32f7_board_sd.c ****   return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_
 901              		.loc 1 553 0
 902 0002 0348     		ldr	r0, .L65
 903              	.LVL91:
 904 0004 FFF7FEFF 		bl	HAL_SD_GetCardState
 905              	.LVL92:
 554:Src/stm32f7_board_sd.c **** }
 906              		.loc 1 554 0
 907 0008 0438     		subs	r0, r0, #4
 908 000a 18BF     		it	ne
 909 000c 0120     		movne	r0, #1
 910 000e 08BD     		pop	{r3, pc}
 911              	.L66:
 912              		.align	2
 913              	.L65:
 914 0010 00000000 		.word	uSdHandle
 915              		.cfi_endproc
 916              	.LFE152:
 918              		.section	.text.BSP_SD_GetCardState,"ax",%progbits
 919              		.align	1
 920              		.global	BSP_SD_GetCardState
 921              		.syntax unified
 922              		.thumb
 923              		.thumb_func
 924              		.fpu fpv5-sp-d16
 926              	BSP_SD_GetCardState:
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 27


 927              	.LFB151:
 539:Src/stm32f7_board_sd.c ****   return BSP_SD_GetCardStateEx(SD_CARD1);
 928              		.loc 1 539 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 0, uses_anonymous_args = 0
 932 0000 08B5     		push	{r3, lr}
 933              	.LCFI26:
 934              		.cfi_def_cfa_offset 8
 935              		.cfi_offset 3, -8
 936              		.cfi_offset 14, -4
 540:Src/stm32f7_board_sd.c **** }
 937              		.loc 1 540 0
 938 0002 0020     		movs	r0, #0
 939 0004 FFF7FEFF 		bl	BSP_SD_GetCardStateEx
 940              	.LVL93:
 541:Src/stm32f7_board_sd.c **** 
 941              		.loc 1 541 0
 942 0008 08BD     		pop	{r3, pc}
 943              		.cfi_endproc
 944              	.LFE151:
 946              		.section	.text.BSP_SD_GetCardInfo,"ax",%progbits
 947              		.align	1
 948              		.global	BSP_SD_GetCardInfo
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 952              		.fpu fpv5-sp-d16
 954              	BSP_SD_GetCardInfo:
 955              	.LFB153:
 555:Src/stm32f7_board_sd.c **** 
 556:Src/stm32f7_board_sd.c **** /**
 557:Src/stm32f7_board_sd.c ****   * @brief  Get SD information about specific SD card.
 558:Src/stm32f7_board_sd.c ****   * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
 559:Src/stm32f7_board_sd.c ****   * @retval None 
 560:Src/stm32f7_board_sd.c ****   */
 561:Src/stm32f7_board_sd.c **** void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
 562:Src/stm32f7_board_sd.c **** {
 956              		.loc 1 562 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              	.LVL94:
 961 0000 08B5     		push	{r3, lr}
 962              	.LCFI27:
 963              		.cfi_def_cfa_offset 8
 964              		.cfi_offset 3, -8
 965              		.cfi_offset 14, -4
 563:Src/stm32f7_board_sd.c ****   /* Get SD card Information */
 564:Src/stm32f7_board_sd.c ****   HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 966              		.loc 1 564 0
 967 0002 0146     		mov	r1, r0
 968 0004 0148     		ldr	r0, .L71
 969              	.LVL95:
 970 0006 FFF7FEFF 		bl	HAL_SD_GetCardInfo
 971              	.LVL96:
 972 000a 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 28


 973              	.L72:
 974              		.align	2
 975              	.L71:
 976 000c 00000000 		.word	uSdHandle
 977              		.cfi_endproc
 978              	.LFE153:
 980              		.section	.text.HAL_SD_AbortCallback,"ax",%progbits
 981              		.align	1
 982              		.global	HAL_SD_AbortCallback
 983              		.syntax unified
 984              		.thumb
 985              		.thumb_func
 986              		.fpu fpv5-sp-d16
 988              	HAL_SD_AbortCallback:
 989              	.LFB154:
 565:Src/stm32f7_board_sd.c **** }
 566:Src/stm32f7_board_sd.c **** 
 567:Src/stm32f7_board_sd.c **** /**
 568:Src/stm32f7_board_sd.c ****   * @brief SD Abort callbacks
 569:Src/stm32f7_board_sd.c ****   * @param hsd: SD handle
 570:Src/stm32f7_board_sd.c ****   * @retval None
 571:Src/stm32f7_board_sd.c ****   */
 572:Src/stm32f7_board_sd.c **** void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
 573:Src/stm32f7_board_sd.c **** {
 990              		.loc 1 573 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 994              	.LVL97:
 995 0000 08B5     		push	{r3, lr}
 996              	.LCFI28:
 997              		.cfi_def_cfa_offset 8
 998              		.cfi_offset 3, -8
 999              		.cfi_offset 14, -4
 574:Src/stm32f7_board_sd.c ****   BSP_SD_AbortCallback();
 1000              		.loc 1 574 0
 1001 0002 FFF7FEFF 		bl	BSP_SD_AbortCallback
 1002              	.LVL98:
 1003 0006 08BD     		pop	{r3, pc}
 1004              		.cfi_endproc
 1005              	.LFE154:
 1007              		.section	.text.HAL_SD_TxCpltCallback,"ax",%progbits
 1008              		.align	1
 1009              		.global	HAL_SD_TxCpltCallback
 1010              		.syntax unified
 1011              		.thumb
 1012              		.thumb_func
 1013              		.fpu fpv5-sp-d16
 1015              	HAL_SD_TxCpltCallback:
 1016              	.LFB155:
 575:Src/stm32f7_board_sd.c **** }
 576:Src/stm32f7_board_sd.c **** 
 577:Src/stm32f7_board_sd.c **** /**
 578:Src/stm32f7_board_sd.c ****   * @brief Tx Transfer completed callbacks
 579:Src/stm32f7_board_sd.c ****   * @param hsd: SD handle
 580:Src/stm32f7_board_sd.c ****   * @retval None
 581:Src/stm32f7_board_sd.c ****   */
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 29


 582:Src/stm32f7_board_sd.c **** void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
 583:Src/stm32f7_board_sd.c **** {
 1017              		.loc 1 583 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              	.LVL99:
 1022 0000 08B5     		push	{r3, lr}
 1023              	.LCFI29:
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 3, -8
 1026              		.cfi_offset 14, -4
 584:Src/stm32f7_board_sd.c ****   BSP_SD_WriteCpltCallback();
 1027              		.loc 1 584 0
 1028 0002 FFF7FEFF 		bl	BSP_SD_WriteCpltCallback
 1029              	.LVL100:
 1030 0006 08BD     		pop	{r3, pc}
 1031              		.cfi_endproc
 1032              	.LFE155:
 1034              		.section	.text.HAL_SD_RxCpltCallback,"ax",%progbits
 1035              		.align	1
 1036              		.global	HAL_SD_RxCpltCallback
 1037              		.syntax unified
 1038              		.thumb
 1039              		.thumb_func
 1040              		.fpu fpv5-sp-d16
 1042              	HAL_SD_RxCpltCallback:
 1043              	.LFB156:
 585:Src/stm32f7_board_sd.c **** }
 586:Src/stm32f7_board_sd.c **** 
 587:Src/stm32f7_board_sd.c **** /**
 588:Src/stm32f7_board_sd.c ****   * @brief Rx Transfer completed callbacks
 589:Src/stm32f7_board_sd.c ****   * @param hsd: SD handle
 590:Src/stm32f7_board_sd.c ****   * @retval None
 591:Src/stm32f7_board_sd.c ****   */
 592:Src/stm32f7_board_sd.c **** void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
 593:Src/stm32f7_board_sd.c **** {
 1044              		.loc 1 593 0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 0
 1047              		@ frame_needed = 0, uses_anonymous_args = 0
 1048              	.LVL101:
 1049 0000 08B5     		push	{r3, lr}
 1050              	.LCFI30:
 1051              		.cfi_def_cfa_offset 8
 1052              		.cfi_offset 3, -8
 1053              		.cfi_offset 14, -4
 594:Src/stm32f7_board_sd.c ****   BSP_SD_ReadCpltCallback();
 1054              		.loc 1 594 0
 1055 0002 FFF7FEFF 		bl	BSP_SD_ReadCpltCallback
 1056              	.LVL102:
 1057 0006 08BD     		pop	{r3, pc}
 1058              		.cfi_endproc
 1059              	.LFE156:
 1061              		.comm	uSdHandle,132,4
 1062              		.section	.bss.dma_rx_handle.11797,"aw",%nobits
 1063              		.align	2
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 30


 1064              		.set	.LANCHOR0,. + 0
 1067              	dma_rx_handle.11797:
 1068 0000 00000000 		.space	96
 1068      00000000 
 1068      00000000 
 1068      00000000 
 1068      00000000 
 1069              		.section	.bss.dma_rx_handle.11808,"aw",%nobits
 1070              		.align	2
 1071              		.set	.LANCHOR2,. + 0
 1074              	dma_rx_handle.11808:
 1075 0000 00000000 		.space	96
 1075      00000000 
 1075      00000000 
 1075      00000000 
 1075      00000000 
 1076              		.section	.bss.dma_tx_handle.11798,"aw",%nobits
 1077              		.align	2
 1078              		.set	.LANCHOR1,. + 0
 1081              	dma_tx_handle.11798:
 1082 0000 00000000 		.space	96
 1082      00000000 
 1082      00000000 
 1082      00000000 
 1082      00000000 
 1083              		.section	.bss.dma_tx_handle.11809,"aw",%nobits
 1084              		.align	2
 1085              		.set	.LANCHOR3,. + 0
 1088              	dma_tx_handle.11809:
 1089 0000 00000000 		.space	96
 1089      00000000 
 1089      00000000 
 1089      00000000 
 1089      00000000 
 1090              		.text
 1091              	.Letext0:
 1092              		.file 2 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 1093              		.file 3 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 1094              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 1095              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1096              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 1097              		.file 7 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\lock.h"
 1098              		.file 8 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\_types.h"
 1099              		.file 9 "c:\\gcc_toolchain\\6_2017-q1-update\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 1100              		.file 10 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\reent.h"
 1101              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1102              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1103              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1104              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 1105              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 1106              		.file 16 "Inc/stm32f7_diskio_dma_rtos.h"
 1107              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 31


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f7_board_sd.c
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:18     .text.BSP_SD_DeInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:25     .text.BSP_SD_DeInit:00000000 BSP_SD_DeInit
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:47     .text.BSP_SD_ReadBlocksEx:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:54     .text.BSP_SD_ReadBlocksEx:00000000 BSP_SD_ReadBlocksEx
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:92     .text.BSP_SD_ReadBlocksEx:00000018 $d
                            *COM*:00000084 uSdHandle
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:97     .text.BSP_SD_ReadBlocks:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:104    .text.BSP_SD_ReadBlocks:00000000 BSP_SD_ReadBlocks
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:140    .text.BSP_SD_WriteBlocksEx:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:147    .text.BSP_SD_WriteBlocksEx:00000000 BSP_SD_WriteBlocksEx
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:185    .text.BSP_SD_WriteBlocksEx:00000018 $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:190    .text.BSP_SD_WriteBlocks:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:197    .text.BSP_SD_WriteBlocks:00000000 BSP_SD_WriteBlocks
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:233    .text.BSP_SD_ReadBlocks_DMAEx:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:240    .text.BSP_SD_ReadBlocks_DMAEx:00000000 BSP_SD_ReadBlocks_DMAEx
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:269    .text.BSP_SD_ReadBlocks_DMAEx:00000010 $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:274    .text.BSP_SD_ReadBlocks_DMA:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:281    .text.BSP_SD_ReadBlocks_DMA:00000000 BSP_SD_ReadBlocks_DMA
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:309    .text.BSP_SD_WriteBlocks_DMAEx:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:316    .text.BSP_SD_WriteBlocks_DMAEx:00000000 BSP_SD_WriteBlocks_DMAEx
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:345    .text.BSP_SD_WriteBlocks_DMAEx:00000010 $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:350    .text.BSP_SD_WriteBlocks_DMA:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:357    .text.BSP_SD_WriteBlocks_DMA:00000000 BSP_SD_WriteBlocks_DMA
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:385    .text.BSP_SD_EraseEx:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:392    .text.BSP_SD_EraseEx:00000000 BSP_SD_EraseEx
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:421    .text.BSP_SD_EraseEx:00000010 $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:426    .text.BSP_SD_Erase:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:433    .text.BSP_SD_Erase:00000000 BSP_SD_Erase
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:459    .text.BSP_SD_MspInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:466    .text.BSP_SD_MspInit:00000000 BSP_SD_MspInit
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:694    .text.BSP_SD_MspInit:0000015c $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:705    .text.BSP_SD_InitEx:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:712    .text.BSP_SD_InitEx:00000000 BSP_SD_InitEx
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:784    .text.BSP_SD_InitEx:00000040 $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:790    .text.BSP_SD_Init:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:797    .text.BSP_SD_Init:00000000 BSP_SD_Init
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:818    .text.BSP_SD_MspDeInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:825    .text.BSP_SD_MspDeInit:00000000 BSP_SD_MspDeInit
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:873    .text.BSP_SD_MspDeInit:00000034 $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:882    .text.BSP_SD_GetCardStateEx:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:889    .text.BSP_SD_GetCardStateEx:00000000 BSP_SD_GetCardStateEx
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:914    .text.BSP_SD_GetCardStateEx:00000010 $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:919    .text.BSP_SD_GetCardState:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:926    .text.BSP_SD_GetCardState:00000000 BSP_SD_GetCardState
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:947    .text.BSP_SD_GetCardInfo:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:954    .text.BSP_SD_GetCardInfo:00000000 BSP_SD_GetCardInfo
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:976    .text.BSP_SD_GetCardInfo:0000000c $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:981    .text.HAL_SD_AbortCallback:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:988    .text.HAL_SD_AbortCallback:00000000 HAL_SD_AbortCallback
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1008   .text.HAL_SD_TxCpltCallback:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1015   .text.HAL_SD_TxCpltCallback:00000000 HAL_SD_TxCpltCallback
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1035   .text.HAL_SD_RxCpltCallback:00000000 $t
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1042   .text.HAL_SD_RxCpltCallback:00000000 HAL_SD_RxCpltCallback
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1063   .bss.dma_rx_handle.11797:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1067   .bss.dma_rx_handle.11797:00000000 dma_rx_handle.11797
ARM GAS  C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s 			page 32


C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1070   .bss.dma_rx_handle.11808:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1074   .bss.dma_rx_handle.11808:00000000 dma_rx_handle.11808
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1077   .bss.dma_tx_handle.11798:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1081   .bss.dma_tx_handle.11798:00000000 dma_tx_handle.11798
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1084   .bss.dma_tx_handle.11809:00000000 $d
C:\Users\Student\AppData\Local\Temp\cc9ReG4d.s:1088   .bss.dma_tx_handle.11809:00000000 dma_tx_handle.11809
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
BSP_SD_DeInitEx
HAL_SD_ReadBlocks
HAL_SD_WriteBlocks
HAL_SD_ReadBlocks_DMA
HAL_SD_WriteBlocks_DMA
HAL_SD_Erase
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_DMA_DeInit
HAL_DMA_Init
HAL_SD_Init
HAL_SD_ConfigWideBusOperation
HAL_NVIC_DisableIRQ
HAL_SD_GetCardState
HAL_SD_GetCardInfo
BSP_SD_AbortCallback
BSP_SD_WriteCpltCallback
BSP_SD_ReadCpltCallback
